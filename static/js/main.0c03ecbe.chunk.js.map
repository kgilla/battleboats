{"version":3,"sources":["game_classes/boat/boat_class.js","game_classes/gameboard/gameboard_class.js","game_classes/player/player_class.js","game_classes/game/game_class.js","components/BoardInfo/BoardInfo.js","components/Gameboard/Gameboard.js","components/Navbar/Navbar.js","components/Boatyard/Boatyard.js","components/SetupIntro/SetupIntro.js","components/Setup/Setup.js","components/GameOver/GameOver.js","components/Rules/Rules.js","components/TurnChange/TurnChange.js","components/App/App.js","index.js"],"names":["Boat","name","length","handleHit","hitsLeft","isSunk","this","hit","Gameboard","board","checkSpace","coords","newBoard","slice","data","isHit","message","attackBoat","response","boat","sinkShip","shipsLeft","map","col","square","boats","quantity","size","create","game","x","push","y","generateRandomBoats","random","forEach","i","newBoat","findSpaces","orientation","Math","floor","space","generateRandomSpace","attemptPlacingBoat","updateBoard","getCoords","getRandomInt","boatData","makeBoatData","check","makeRandomBoatData","anyCoordsOutside","checkCoordArray","coordExists","some","coord","testCoords","test","c","element","boardData","receiveAttack","min","max","ceil","Player","enemyGameBoard","userMakeMove","move","verifyMoveIsLegal","makeMoveOnBoard","makeChoiceArray","array","makeSmartChoiceArray","makeSmartChoices","newArray","choicesLeft","compMakeMove","lastMove","assessLastMove","result","logMove","makeRandomMove","makeRandomChoice","choice","smartChoices","filterChoices","choiceArray","find","filter","results","direction","prevMoves","continueAttack","hits","filterHits","plotNextMove","attemptReverse","determineAndFilter","useHitsArray","nextMoves","makeNextMoves","filteredMoves","filterNextMoves","moves","nextMove","m","determineNextAttack","newDirection","reverseDirection","newMove","verifyReverse","Game","userTurn","user","playerOne","win","checkWin","compTurn","comp","playerTwo","player","createPlayer","computer","BoardInfo","props","className","title","Board","info","colInfo","rowInfo","handleEdit","e","newCoords","dataToCoords","handleMove","handleInput","determineClass","cell","determineInner","handleDragOver","preventDefault","handleDrop","sendCoord","target","attributes","value","split","parseInt","active","row","onClick","onDragOver","onDrop","showInfo","Navbar","useState","showMenu","setShowMenu","handleClick","innerText","newGame","toggleRules","toggleMenu","windowWidth","id","Boatyard","sendBoatOrientation","handleOffsetX","determineSquareSize","offset","nativeEvent","offsetX","sendOffset","handleOffsetY","offsetY","draggable","onDragStart","createBoat","SetupIntro","introChange","Setup","gameboard","setGameboard","setBoard","setBoats","setOrientation","setOffset","useEffect","init","newBoats","handleIntroChange","toggleShowIntro","showIntro","num","newCoord","calcOffset","newData","ele","disabled","sendUserBoard","GameOver","handleNewGame","Rules","TurnChange","App","setGame","isGameOver","setIsGameOver","winData","setWinData","gameStarted","setGameStarted","boardOne","setBoardOne","boardOneData","setBoardOneData","boardTwo","setBoardTwo","boardTwoData","setBoardTwoData","setUserTurn","showRules","setShowRules","setShowIntro","window","innerWidth","setWindowWidth","showTurn","setShowTurn","addEventListener","playerWin","compWin","takeCompTurn","handleGameOver","setTimeout","changeTurn","input","startGame","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c03ecbe.chunk.js","sourcesContent":["class Boat {\n  constructor(name, length) {\n    this.name = name;\n    this.hitsLeft = length;\n    this.isSunk = false;\n    this.length = length;\n    this.hit = () => this.handleHit();\n  }\n\n  handleHit = () => {\n    this.hitsLeft--;\n    if (this.hitsLeft === 0) {\n      this.isSunk = true;\n      return this;\n    } else {\n      return this;\n    }\n  };\n}\n\nexport default Boat;\n","import Boat from \"../boat/boat_class\";\n\nclass Gameboard {\n  constructor(board) {\n    this.board = board ? board : this.create();\n    this.receiveAttack = (coords) => this.checkSpace(coords);\n    this.shipsLeft = 10;\n    this.random = false;\n  }\n\n  checkSpace = (coords) => {\n    let newBoard = this.board.slice();\n    let data = newBoard[coords[0]][coords[1]];\n    this.board = newBoard;\n    if (data === null) {\n      // blank space, record miss and send data\n      newBoard[coords[0]][coords[1]] = \"~\";\n      return { isHit: false, isSunk: false, message: \"you missed\", newBoard };\n    } else {\n      // use hit method for boat, record hit on board, send data\n      return this.attackBoat(data, newBoard, coords);\n    }\n  };\n\n  attackBoat = (data, newBoard) => {\n    let response = data.boat.hit();\n    data.isHit = true;\n    if (response.isSunk === true) {\n      newBoard = this.sinkShip(data, newBoard);\n    }\n    this.board = newBoard;\n    return {\n      isHit: true,\n      isSunk: response.isSunk,\n      response,\n      newBoard,\n      boat: data.boat,\n    };\n  };\n\n  sinkShip = (data, newBoard) => {\n    this.shipsLeft -= 1;\n    newBoard.map((col) => {\n      return col.map((square) => {\n        if (square !== null) {\n          if (square.boat === data.boat) {\n            return (square.isSunk = true);\n          }\n        }\n      });\n    });\n    return newBoard;\n  };\n\n  // Array of boats to use per gameboard\n  boats = [\n    { name: \"Carrier\", quantity: 1, size: 5 },\n    { name: \"Battleboat\", quantity: 2, size: 4 },\n    { name: \"Destroyer\", quantity: 3, size: 3 },\n    { name: \"Submarine\", quantity: 4, size: 2 },\n  ];\n\n  // Creates a blank gameboard\n  create = () => {\n    let game = [];\n    for (let x = 0; x < 10; x++) {\n      game.push([]);\n      for (let y = 0; y < 10; y++) {\n        game[x][y] = null;\n      }\n    }\n    return game;\n  };\n\n  // Functions for randomly populating board\n\n  // Loop for filling gameboard with boats in random spaces\n  generateRandomBoats = () => {\n    this.random = true;\n    this.boats.forEach((boat) => {\n      for (let i = 0; i < boat.quantity; i++) {\n        let newBoat = new Boat(boat.name, boat.size);\n        this.findSpaces(boat.size, newBoat);\n      }\n    });\n  };\n\n  // Loop for each boat to determine orientation, random empty spot based on orientation, and see if it fits in said spot\n  findSpaces = (size, boat) => {\n    let orientation = Math.floor(Math.random() * 2);\n    let space = this.generateRandomSpace(size, orientation);\n    let data = this.attemptPlacingBoat(size, space, orientation);\n    data ? this.updateBoard(data, boat) : this.findSpaces(size, boat);\n  };\n\n  // Generates coordinates based on orientation, size constraints, checks if empty\n  generateRandomSpace = (size, orientation) => {\n    let coords = this.getCoords(size, orientation);\n    let space = this.board[coords[0]][coords[1]];\n    return space === null\n      ? coords\n      : this.generateRandomSpace(size, orientation);\n  };\n\n  // Generates random coordinates based on size and orientation constraints\n  getCoords = (size, orientation) => {\n    return orientation === 1\n      ? [this.getRandomInt(0, 9), this.getRandomInt(0, size)]\n      : [this.getRandomInt(0, size), this.getRandomInt(0, 9)];\n  };\n\n  getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  // Placement functions\n\n  // Loop for attemping placement\n  attemptPlacingBoat = (size, space, orientation) => {\n    let boatData = this.makeBoatData(size, space, orientation);\n    let check = this.random\n      ? this.makeRandomBoatData(size, space, orientation)\n      : boatData;\n    if (!this.anyCoordsOutside(boatData)) {\n      let spotFilled = this.checkCoordArray(check);\n      return spotFilled ? false : boatData;\n    } else {\n      return false;\n    }\n  };\n\n  // Generates tests array of coordinates for where the boat will be placed\n  makeBoatData = (size, space, orientation) => {\n    let data = [];\n    if (orientation === 1) {\n      for (let y = space[1]; y < space[1] + size; y++) {\n        data.push([space[0], y]);\n      }\n    } else {\n      for (let x = space[0]; x < space[0] + size; x++) {\n        data.push([x, space[1]]);\n      }\n    }\n    return data;\n  };\n\n  makeRandomBoatData = (size, space, orientation) => {\n    let data = [];\n    if (orientation === 1) {\n      for (let y = space[1] - 1; y < space[1] + (size + 1); y++) {\n        if (this.coordExists([space[0], y])) data.push([space[0], y]);\n      }\n    } else {\n      for (let x = space[0] - 1; x < space[0] + (size + 1); x++) {\n        if (this.coordExists([x, space[1]])) data.push([x, space[1]]);\n      }\n    }\n    return data;\n  };\n\n  anyCoordsOutside = (coords) => {\n    return coords.some((coord) => !this.coordExists(coord));\n  };\n\n  coordExists = (coord) => {\n    if (coord[0] < 10 && coord[0] >= 0) {\n      if (coord[1] < 10 && coord[1] >= 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // Populates test array with values, ,checks values for a boat\n  checkCoordArray = (testCoords) => {\n    let test = [];\n    testCoords.forEach((c) => {\n      test.push(this.board[c[0]][c[1]]);\n    });\n    return test.some((element) => element !== null);\n  };\n\n  // Updates the gameboard with the boat object in each space it covers\n  updateBoard = (data, boat) => {\n    let newBoard = this.board.slice();\n    data.forEach((coord) => {\n      let boardData = {\n        isHit: false,\n        isSunk: false,\n        boat,\n      };\n      newBoard[coord[0]][coord[1]] = boardData;\n    });\n    this.board = newBoard;\n  };\n}\n\nexport default Gameboard;\n","class Player {\n  constructor(enemyGameBoard) {\n    this.enemyGameBoard = enemyGameBoard;\n    this.choicesLeft = this.makeChoiceArray();\n    this.smartChoices = this.makeSmartChoices();\n    this.lastMove = {};\n    this.hits = [];\n  }\n\n  userMakeMove = (coords) => {\n    let move = { coords };\n    if (this.verifyMoveIsLegal(move)) {\n      return this.makeMoveOnBoard(coords);\n    } else {\n      return;\n    }\n  };\n\n  makeChoiceArray = () => {\n    let array = [];\n    for (let x = 0; x < 10; x++) {\n      for (let y = 0; y < 10; y++) {\n        array.push({ x: x, y: y });\n      }\n    }\n    return array;\n  };\n\n  makeSmartChoiceArray = () => {\n    let array = [0];\n    let i = 0;\n    while (i < 100) {\n      for (let x = 0; x < 4; x++) {\n        i += 2;\n        array.push(i);\n      }\n      i % 2 === 0 ? (i += 3) : (i += 1);\n      array.push(i);\n    }\n    return array;\n  };\n\n  makeSmartChoices = () => {\n    let array = this.makeSmartChoiceArray();\n    let newArray = [];\n    array.forEach((i) => newArray.push(this.choicesLeft[i]));\n    newArray = newArray.slice(0, 50);\n    return newArray;\n  };\n\n  compMakeMove = () => {\n    if (this.lastMove) {\n      let data = this.assessLastMove();\n      let result = this.makeMoveOnBoard(data.coords);\n      this.logMove(data, result);\n      return result;\n    } else {\n      return this.makeRandomMove();\n    }\n  };\n\n  makeRandomMove = () => {\n    let data = this.makeRandomChoice();\n    let result = this.makeMoveOnBoard(data.coords);\n    this.logMove(data, result);\n    return result;\n  };\n\n  makeRandomChoice = () => {\n    let choice = Math.floor(Math.random() * this.smartChoices.length);\n    let coords = [this.smartChoices[choice].x, this.smartChoices[choice].y];\n    return { coords };\n  };\n\n  filterChoices = (coords, choiceArray) => {\n    let array = choiceArray.slice();\n    let choice = array.find((c) => c.x === coords[0] && c.y === coords[1]);\n    array = array.filter((c) => c !== choice);\n    return array;\n  };\n\n  makeMoveOnBoard = (move) => {\n    this.choicesLeft = this.filterChoices(move, this.choicesLeft);\n    this.smartChoices = this.filterChoices(move, this.smartChoices);\n    return this.enemyGameBoard.receiveAttack(move);\n  };\n\n  logMove = (data, results) => {\n    let { coords, direction, prevMoves, continueAttack } = data;\n    let { isHit, isSunk, boat } = results;\n    this.lastMove = {\n      coords,\n      isHit,\n      isSunk,\n      direction,\n      prevMoves,\n      boat,\n      continueAttack,\n    };\n    if (this.lastMove.isHit && !this.lastMove.isSunk) {\n      this.hits.push(this.lastMove);\n    }\n    if (this.lastMove.isSunk) {\n      this.filterHits();\n    }\n  };\n\n  assessLastMove = () => {\n    if (this.lastMove.isHit && !this.lastMove.isSunk) {\n      if (this.lastMove.direction) {\n        return this.continueAttack();\n      } else {\n        return this.plotNextMove();\n      }\n    } else if (this.lastMove.continueAttack && !this.lastMove.isSunk) {\n      return this.attemptReverse(this.lastMove);\n    } else if (this.lastMove.prevMoves && !this.lastMove.isSunk) {\n      return this.determineAndFilter(this.lastMove.prevMoves);\n    } else if (this.hits.length > 0) {\n      let data = this.useHitsArray();\n      return data;\n    } else {\n      return this.makeRandomChoice();\n    }\n  };\n\n  useHitsArray = () => {\n    this.lastMove = this.hits[0];\n    let nextMoves = this.makeNextMoves(this.lastMove.coords);\n    let filteredMoves = this.filterNextMoves(nextMoves);\n    if (filteredMoves.length > 0) {\n      this.filterHits();\n      return this.determineAndFilter(filteredMoves);\n    } else {\n      this.filterHits();\n      if (this.hits.length > 0) {\n        return this.useHitsArray();\n      } else {\n        return this.makeRandomChoice();\n      }\n    }\n  };\n\n  determineAndFilter = (moves) => {\n    if (moves.length > 1) {\n      let nextMove = moves[Math.floor(Math.random() * moves.length)];\n      let filteredMoves = moves.filter((m) => m !== nextMove);\n      return {\n        coords: nextMove.coords,\n        direction: nextMove.direction,\n        prevMoves: filteredMoves,\n      };\n    } else {\n      return {\n        coords: moves[0].coords,\n        direction: moves[0].direction,\n        prevMoves: \"\",\n      };\n    }\n  };\n\n  continueAttack = () => {\n    let move = this.determineNextAttack(this.lastMove.coords);\n    if (this.verifyMoveIsLegal(move)) {\n      return move;\n    } else {\n      return this.attemptReverse(this.lastMove);\n    }\n  };\n\n  attemptReverse = (move) => {\n    let newDirection = this.reverseDirection(move.direction);\n    let newMove = move.prevMoves\n      ? move.prevMoves.find((m) => m.direction === newDirection)\n      : \"\";\n    if (this.verifyMoveIsLegal(newMove)) {\n      return newMove;\n    } else if (this.hits.length > 0) {\n      return this.useHitsArray();\n    } else {\n      return this.makeRandomChoice();\n    }\n  };\n\n  reverseDirection = (direction) => {\n    if (direction === \"north\") {\n      return \"south\";\n    } else if (direction === \"south\") {\n      return \"north\";\n    } else if (direction === \"east\") {\n      return \"west\";\n    } else {\n      return \"east\";\n    }\n  };\n\n  verifyReverse = (move) => {};\n\n  determineNextAttack = (c) => {\n    let coords = \"\";\n    if (this.lastMove.direction === \"north\") {\n      coords = [c[0], c[1] - 1];\n    } else if (this.lastMove.direction === \"east\") {\n      coords = [c[0] + 1, c[1]];\n    } else if (this.lastMove.direction === \"south\") {\n      coords = [c[0], c[1] + 1];\n    } else {\n      coords = [c[0] - 1, c[1]];\n    }\n    return {\n      coords,\n      direction: this.lastMove.direction,\n      prevMoves: this.lastMove.prevMoves,\n      continueAttack: true,\n    };\n  };\n\n  verifyMoveIsLegal = (move) => {\n    if (move) {\n      let result = this.choicesLeft.some(\n        (coord) => coord.x === move.coords[0] && coord.y === move.coords[1]\n      );\n      return result;\n    } else {\n      return false;\n    }\n  };\n\n  plotNextMove = () => {\n    let nextMoves = this.makeNextMoves(this.lastMove.coords);\n    let filteredMoves = this.filterNextMoves(nextMoves);\n    return filteredMoves.length > 0\n      ? this.determineAndFilter(filteredMoves)\n      : this.makeRandomChoice();\n  };\n\n  makeNextMoves = (move) => {\n    return [\n      { coords: [move[0], move[1] - 1], direction: \"north\" },\n      { coords: [move[0] - 1, move[1]], direction: \"west\" },\n      { coords: [move[0], move[1] + 1], direction: \"south\" },\n      { coords: [move[0] + 1, move[1]], direction: \"east\" },\n    ];\n  };\n\n  filterNextMoves = (nextMoves) => {\n    let filteredMoves = [];\n    nextMoves.forEach((move) => {\n      if (this.verifyMoveIsLegal(move)) {\n        filteredMoves.push(move);\n      }\n    });\n    return filteredMoves;\n  };\n\n  filterHits = () => {\n    this.hits = this.hits.filter((hit) => !hit.boat.isSunk);\n  };\n}\n\nexport default Player;\n","import Gameboard from \"../gameboard/gameboard_class\";\nimport Player from \"../player/player_class\";\n\nclass Game {\n  constructor(board) {\n    this.playerOne = this.createPlayer(false);\n    this.playerTwo = this.createPlayer(true, board);\n  }\n\n  userTurn = (coords) => {\n    let user = this.playerOne.userMakeMove(coords);\n    if (user) {\n      user.win = this.checkWin(this.playerOne);\n      return user;\n    } else {\n      return;\n    }\n  };\n\n  compTurn = () => {\n    let comp = this.playerTwo.compMakeMove();\n    comp.win = this.checkWin(this.playerTwo);\n    return comp;\n  };\n\n  checkWin = (player) => {\n    return player.enemyGameBoard.shipsLeft === 0 ? true : false;\n  };\n\n  createPlayer = (computer, board = \"\") => {\n    let game = new Gameboard(board);\n    if (board === \"\") game.generateRandomBoats();\n    return new Player(game, computer);\n  };\n}\n\nexport default Game;\n","import React from \"react\";\n\nconst BoardInfo = (props) => {\n  return (\n    <div className={props.title === \"Your Boats\" ? \"your-info\" : \"pc-info\"}>\n      <h2 className=\"info-title\">{props.title}</h2>\n      <h2 className=\"info-ship-count\">Ships Left: {props.shipsLeft}</h2>\n    </div>\n  );\n};\n\nexport default BoardInfo;\n","import React from \"react\";\nimport \"./Gameboard.css\";\n\nimport BoardInfo from \"../BoardInfo\";\n\nconst Board = (props) => {\n  const info = {\n    colInfo: [\"\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    rowInfo: [\"\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"],\n  };\n\n  const handleEdit = (e) => {\n    let newCoords = dataToCoords(e);\n    props.handleEdit(props.board[newCoords[0]][newCoords[1]]);\n  };\n\n  const handleMove = (e) => {\n    let newCoords = dataToCoords(e);\n    props.handleInput(newCoords);\n  };\n\n  const determineClass = (cell) => {\n    if (cell !== null) {\n      if (cell.isSunk) {\n        return \"is-sunk\";\n      } else if (cell === \"~\") {\n        return \"board-miss\";\n      } else if (cell.isHit) {\n        return \"board-hit\";\n      } else if (props.handleInput) {\n        return \"your-square\";\n      } else {\n        return \"your-ship\";\n      }\n    } else if (props.handleInput) {\n      return \"your-square\";\n    } else {\n      return \"board-square\";\n    }\n  };\n\n  const determineInner = (cell) => {\n    if (cell !== null) {\n      if (cell.isSunk || cell.isHit) {\n        return \"X\";\n      } else if (cell === \"~\") {\n        return \"~\";\n      }\n    }\n  };\n\n  const handleDragOver = (e) => {\n    e.preventDefault();\n  };\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    let square = dataToCoords(e);\n    props.sendCoord(square);\n  };\n\n  const dataToCoords = (e) => {\n    let square = e.target.attributes[0].value.split(\",\");\n    square = square.map((coord) => {\n      return parseInt(coord);\n    });\n    return square;\n  };\n\n  return (\n    <div className={props.active ? \"active\" : \"inactive\"}>\n      <div className=\"gameboard-container\">\n        <div className=\"gameboard-col-info\">\n          {info.rowInfo.map((row, i) => (\n            <div className=\"info-square\" key={i}>\n              {row}\n            </div>\n          ))}\n        </div>\n        <div className=\"gameboard-row-info\">\n          {info.colInfo.map((col, i) => (\n            <div className=\"info-square\" key={i}>\n              {col}\n            </div>\n          ))}\n        </div>\n        <div className=\"gameboard\">\n          {props.board.map((row, x) => (\n            <div className=\"gameboard-column\" key={x}>\n              {row.map((cell, y) => (\n                <div\n                  key={`${x},${y}`}\n                  data={[x, y]}\n                  className={determineClass(cell)}\n                  onClick={\n                    props.handleInput\n                      ? handleMove\n                      : props.handleEdit\n                      ? handleEdit\n                      : null\n                  }\n                  onDragOver={handleDragOver}\n                  onDrop={handleDrop}\n                >\n                  {determineInner(cell)}\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n      {props.showInfo ? (\n        <BoardInfo shipsLeft={props.shipsLeft} title={props.title} />\n      ) : null}\n    </div>\n  );\n};\n\nexport default Board;\n","import React, { useState } from \"react\";\nimport \"./Navbar.css\";\n\nconst Navbar = (props) => {\n  const [showMenu, setShowMenu] = useState(false);\n\n  const handleClick = (e) => {\n    if (showMenu) setShowMenu(false);\n    e.target.innerText === \"New Game\" ? props.newGame() : props.toggleRules();\n  };\n\n  const toggleMenu = () => {\n    showMenu ? setShowMenu(false) : setShowMenu(true);\n  };\n\n  return (\n    <div className=\"nav-container\">\n      <nav className=\"main-nav\">\n        <h1 className=\"nav-title\">BattleBoats!</h1>\n        {props.windowWidth > 750 ? (\n          <ul className=\"nav-links\">\n            {\" \"}\n            <button className=\"nav-button\" onClick={handleClick}>\n              Rules\n            </button>{\" \"}\n            <button className=\"nav-button\" onClick={handleClick}>\n              New Game\n            </button>\n          </ul>\n        ) : (\n          <button className=\"nav-button\" onClick={toggleMenu}>\n            Menu\n          </button>\n        )}\n        {showMenu ? (\n          <div className=\"overlay\">\n            <div className=\"nav-menu\">\n              <h2 className=\"nav-menu-heading\">BattleBoats!</h2>{\" \"}\n              <ul className=\"menu-links\">\n                {\" \"}\n                <button className=\"setup-button\" onClick={handleClick}>\n                  New Game\n                </button>\n                <button className=\"setup-button\" onClick={handleClick}>\n                  Rules\n                </button>{\" \"}\n                <button\n                  className=\"setup-button\"\n                  id=\"back-button\"\n                  onClick={toggleMenu}\n                >\n                  Back To Game\n                </button>{\" \"}\n              </ul>\n            </div>\n          </div>\n        ) : null}\n      </nav>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./Boatyard.css\";\n\nconst Boatyard = (props) => {\n  const handleClick = (e) => {\n    props.orientation === 0\n      ? props.sendBoatOrientation(1)\n      : props.sendBoatOrientation(0);\n  };\n\n  const handleDragStart = (e) => {\n    props.orientation === 0 ? handleOffsetX(e) : handleOffsetY(e);\n  };\n\n  const handleOffsetX = (e) => {\n    let size = determineSquareSize();\n    let offset = e.nativeEvent.offsetX - size;\n    offset = Math.ceil(offset / size);\n    props.sendOffset(offset);\n  };\n\n  const handleOffsetY = (e) => {\n    let size = determineSquareSize();\n    let offset = e.nativeEvent.offsetY - size;\n    offset = Math.ceil(offset / size);\n    props.sendOffset(offset);\n  };\n\n  const determineSquareSize = () => {\n    return props.windowWidth < 576\n      ? 25\n      : props.windowWidth < 768\n      ? 30\n      : props.windowWidth < 1400\n      ? 40\n      : 50;\n  };\n\n  const createBoat = () => {\n    let boat = [];\n    for (let i = 0; i < props.boats[0].length; i++) {\n      boat.push(<div key={i} className=\"boat\"></div>);\n    }\n    return boat;\n  };\n\n  return (\n    <div className=\"boatyard\">\n      <h1 className=\"boatyard-title\">Place Your Boats</h1>\n      <div className=\"dock\" onClick={handleClick}>\n        {props.boats.length > 0 ? (\n          <div\n            className={\n              props.orientation === 0 ? \"boat-horizontal\" : \"boat-vertical\"\n            }\n            draggable\n            onDragStart={handleDragStart}\n            onClick={handleClick}\n          >\n            {props.boats.length > 0 ? createBoat() : null}\n          </div>\n        ) : (\n          <h2 className=\"dock-text\">All Set!</h2>\n        )}\n      </div>\n      {props.boats.length > 0 ? (\n        <h2 className=\"boat-name\">{props.boats[0].name}</h2>\n      ) : null}\n    </div>\n  );\n};\n\nexport default Boatyard;\n","import React from \"react\";\nimport \"./SetupIntro.css\";\n\nconst SetupIntro = (props) => {\n  const handleClick = () => {\n    props.introChange();\n  };\n\n  return (\n    <div className=\"overlay\">\n      {\" \"}\n      <div className=\"setup-intro-container\">\n        <h2 className=\"setup-intro-heading\">The Setup.</h2>\n        <ul className=\"setup-intro-list\">\n          <li className=\"setup-intro-tip\">\n            Drag and drop your boats onto your board.\n          </li>\n          <li className=\"setup-intro-tip\">\n            You can rotate ships before you grab them by clicking on them.\n          </li>\n          <li className=\"setup-intro-tip\">\n            You can remove a placed ship simply by clicking on it.\n          </li>\n          <li className=\"setup-intro-tip\">\n            Lazy? Click random boats and you're ready to pew pew.\n          </li>\n        </ul>\n        <button className=\"setup-button\" onClick={handleClick}>\n          Thanks Tips!\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default SetupIntro;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Setup.css\";\n\nimport Board from \"../Gameboard\";\nimport Boatyard from \"../Boatyard\";\nimport SetupIntro from \"../SetupIntro\";\n\nimport Gameboard from \"../../game_classes/gameboard/gameboard_class\";\nimport Boat from \"../../game_classes/boat/boat_class\";\n\nconst Setup = (props) => {\n  const [gameboard, setGameboard] = useState(\"\");\n  const [board, setBoard] = useState(\"\");\n  const [boats, setBoats] = useState(\"\");\n  const [orientation, setOrientation] = useState(0);\n  const [offset, setOffset] = useState(0);\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  const determineOrientation = (orientation) => {\n    setOrientation(orientation);\n  };\n\n  const calcOffset = (coord) => {\n    return orientation === 0\n      ? [coord[0] - offset, coord[1]]\n      : [coord[0], coord[1] - offset];\n  };\n\n  const handleCoord = (coord) => {\n    let newCoord = calcOffset(coord);\n    let newData = gameboard.attemptPlacingBoat(\n      boats[0].length,\n      newCoord,\n      orientation\n    );\n    if (newData) {\n      gameboard.updateBoard(newData, boats[0]);\n      let newBoats = boats.slice(1);\n      setBoats(newBoats);\n      updateBoard();\n    }\n  };\n\n  const handleOffset = (num) => {\n    setOffset(num);\n  };\n\n  const updateBoard = () => {\n    setBoard(gameboard.board);\n  };\n\n  const handleGameStart = () => {\n    props.sendUserBoard(board);\n  };\n\n  const handleRandom = () => {\n    gameboard.board = gameboard.create();\n    gameboard.generateRandomBoats();\n    setBoats(\"\");\n    updateBoard();\n  };\n\n  const handleReset = () => {\n    init();\n  };\n\n  const init = () => {\n    let newBoard = new Gameboard();\n    setGameboard(newBoard);\n    setBoard(newBoard.board);\n    let newBoats = [];\n    newBoard.boats.forEach((boat) => {\n      for (let i = 0; i < boat.quantity; i++) {\n        newBoats.push(new Boat(boat.name, boat.size));\n      }\n    });\n    setBoats(newBoats);\n  };\n\n  const handleCoordChange = (square) => {\n    if (square) {\n      setBoats([square.boat, ...boats]);\n      gameboard.board = gameboard.board.map((col) => {\n        return col.map((ele) => {\n          if (ele) {\n            if (ele.boat === square.boat) {\n              return null;\n            } else {\n              return ele;\n            }\n          }\n          return null;\n        });\n      });\n      updateBoard();\n    }\n  };\n\n  const handleIntroChange = () => {\n    props.toggleShowIntro();\n  };\n\n  return (\n    <div className=\"setup-container\">\n      {props.showIntro ? <SetupIntro introChange={handleIntroChange} /> : null}\n      {gameboard ? (\n        <div className=\"setup-main-container\">\n          <Boatyard\n            boats={boats}\n            orientation={orientation}\n            sendBoatOrientation={determineOrientation}\n            sendOffset={handleOffset}\n            windowWidth={props.windowWidth}\n          />\n          <div className=\"setup-gameboard\">\n            <Board\n              board={board}\n              sendCoord={handleCoord}\n              handleEdit={handleCoordChange}\n            />\n          </div>\n        </div>\n      ) : null}\n      <div className=\"setup-button-box\">\n        <button className=\"setup-button\" onClick={handleRandom}>\n          Random Boats\n        </button>\n        <button className=\"setup-button\" onClick={handleReset}>\n          Reset Board\n        </button>\n        <button className=\"setup-button\" onClick={handleIntroChange}>\n          How To\n        </button>\n        {boats.length > 0 ? (\n          <button disabled className=\"start-button\">\n            Start Game\n          </button>\n        ) : (\n          <button onClick={handleGameStart} className=\"start-button\">\n            Start Game\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Setup;\n","import React from \"react\";\nimport \"./GameOver.css\";\n\nconst GameOver = (props) => {\n  const handleClick = () => {\n    props.handleNewGame();\n  };\n\n  return (\n    <div className=\"overlay\">\n      <div className={props.data.win ? \"win-box\" : \"lose-box\"}>\n        <h1 className=\"gameover-heading\">{props.data.title}</h1>\n        <p className=\"gameover-message\">{props.data.message}</p>\n        <button className=\"gameover-button\" onClick={handleClick}>\n          Play Again?\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default GameOver;\n","import React from \"react\";\nimport \"./Rules.css\";\n\nconst Rules = (props) => {\n  const handleClick = () => {\n    props.toggleRules();\n  };\n  return (\n    <div className=\"overlay\">\n      <div className=\"rules-container\">\n        <div className=\"main-rules\">\n          {\" \"}\n          <h2 className=\"rules-heading\">The Rules.</h2>\n          <ul>\n            {\" \"}\n            <li className=\"rule\">\n              Place your ships manually by dragging and dropping them onto your\n              board or by randomly placing them.\n            </li>\n            <li className=\"rule\">\n              Each turn you must guess a square on your enemy's board you think\n              might have a ship.\n            </li>\n            <li className=\"rule\">\n              If you guess correctly, you are able to continue your attack until\n              you miss.\n            </li>\n            <li className=\"rule\">\n              The game is over once a player successfully sinks all of their\n              opponent's boats\n            </li>\n          </ul>\n        </div>\n        <div className=\"rules-legend-container\">\n          <h2 className=\"rules-heading\">Board Legend</h2>\n          <ul className=\"rules-legend\">\n            {\" \"}\n            <div className=\"legend-item\">\n              {\" \"}\n              <p>Your Ships</p>\n              <div className=\"your-ship\"></div>\n            </div>\n            <div className=\"legend-item\">\n              {\" \"}\n              <p>A Hit</p>\n              <div className=\"board-hit\">X</div>\n            </div>\n            <div className=\"legend-item\">\n              {\" \"}\n              <p>A Miss</p>\n              <div className=\"board-miss\">~</div>\n            </div>\n            <div className=\"legend-item\">\n              {\" \"}\n              <p>A Sunken Boat</p>\n              <div className=\"is-sunk\">X</div>\n            </div>\n          </ul>\n        </div>\n\n        <button className=\"setup-button\" onClick={handleClick}>\n          Got It!\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Rules;\n","import React from \"react\";\nimport \"./TurnChange.css\";\n\nconst TurnChange = (props) => {\n  return (\n    <div className={props.userTurn ? \"your-turn\" : \"cpu-turn\"}>\n      {props.userTurn ? \"Your Turn!\" : \"Computer's Turn\"}\n    </div>\n  );\n};\n\nexport default TurnChange;\n","import React, { useState, useEffect } from \"react\";\nimport \"./reset.css\";\nimport \"./App.css\";\n\nimport Game from \"../../game_classes/game/game_class\";\nimport Board from \"../Gameboard\";\nimport Navbar from \"../Navbar\";\nimport Setup from \"../Setup\";\nimport GameOver from \"../GameOver\";\nimport Rules from \"../Rules\";\nimport TurnChange from \"../TurnChange\";\n\nfunction App() {\n  const [game, setGame] = useState(\"\");\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [winData, setWinData] = useState(\"\");\n  const [gameStarted, setGameStarted] = useState(false);\n  const [boardOne, setBoardOne] = useState(\"\");\n  const [boardOneData, setBoardOneData] = useState(\"\");\n  const [boardTwo, setBoardTwo] = useState(\"\");\n  const [boardTwoData, setBoardTwoData] = useState(\"\");\n  const [userTurn, setUserTurn] = useState(true);\n  const [showRules, setShowRules] = useState(false);\n  const [showIntro, setShowIntro] = useState(true);\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  const [showTurn, setShowTurn] = useState(false);\n\n  useEffect(() => {\n    const handleWindowResize = () => {\n      setWindowWidth(window.innerWidth);\n    };\n    window.addEventListener(\"resize\", handleWindowResize);\n  }, []);\n\n  const playerWin = {\n    win: true,\n    title: \"Winner!\",\n    message: \"You defeated the evil Battleboat threat!\",\n  };\n\n  const compWin = {\n    win: false,\n    title: \"Defeat!\",\n    message: \"You failed to overcome the impending Battleboat threat!\",\n  };\n\n  const handleInput = (input) => {\n    if (userTurn) {\n      let user = game.userTurn(input);\n      if (user) {\n        updateBoard(1);\n        if (user.win) {\n          handleGameOver(playerWin);\n        } else if (!user.isHit) {\n          setUserTurn(false);\n          changeTurn();\n          setTimeout(() => {\n            takeCompTurn();\n          }, 1000);\n        }\n      }\n    }\n  };\n\n  const takeCompTurn = () => {\n    let comp = game.compTurn();\n    updateBoard(2);\n    if (comp.win) {\n      handleGameOver(compWin);\n    } else if (comp.isHit) {\n      setTimeout(() => {\n        takeCompTurn();\n      }, 1000);\n    } else {\n      setTimeout(() => {\n        changeTurn();\n        setUserTurn(true);\n      }, 1000);\n    }\n  };\n\n  const changeTurn = () => {\n    setShowTurn(true);\n    setTimeout(() => {\n      setShowTurn(false);\n    }, 1000);\n  };\n\n  const updateBoard = (player) => {\n    if (player === 1) {\n      setBoardOne(game.playerOne.enemyGameBoard.board);\n      setBoardOneData(game.playerOne.enemyGameBoard);\n    } else {\n      setBoardTwo(game.playerTwo.enemyGameBoard.board);\n      setBoardTwoData(game.playerTwo.enemyGameBoard);\n    }\n  };\n\n  const handleGameOver = (data) => {\n    setWinData(data);\n    setIsGameOver(true);\n  };\n\n  const startGame = (board) => {\n    let newGame = new Game(board);\n    setGame(newGame);\n    setBoardOne(newGame.playerOne.enemyGameBoard.board);\n    setBoardTwo(newGame.playerTwo.enemyGameBoard.board);\n    setBoardOneData(newGame.playerOne.enemyGameBoard);\n    setBoardTwoData(newGame.playerTwo.enemyGameBoard);\n    setUserTurn(true);\n    setGameStarted(true);\n    setIsGameOver(false);\n    changeTurn();\n  };\n\n  const handleUserBoard = (board) => {\n    startGame(board);\n  };\n\n  const handleNewGame = () => {\n    setGameStarted(false);\n    setIsGameOver(false);\n  };\n\n  const toggleRules = () => {\n    showRules ? setShowRules(false) : setShowRules(true);\n  };\n\n  const toggleShowIntro = () => {\n    showIntro ? setShowIntro(false) : setShowIntro(true);\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar\n        newGame={handleNewGame}\n        toggleRules={toggleRules}\n        windowWidth={windowWidth}\n      />\n      {showTurn ? <TurnChange userTurn={userTurn} /> : null}\n      {showRules ? <Rules toggleRules={toggleRules} /> : null}\n      {isGameOver ? (\n        <GameOver data={winData} handleNewGame={handleNewGame} />\n      ) : null}\n      {gameStarted ? (\n        <div className=\"board-container\">\n          <Board\n            board={boardTwo}\n            title=\"Your Boats\"\n            shipsLeft={boardTwoData.shipsLeft}\n            active={!userTurn ? true : false}\n            showInfo={true}\n          />\n          <Board\n            board={boardOne}\n            title=\"Enemy Boats\"\n            handleInput={handleInput}\n            shipsLeft={boardOneData.shipsLeft}\n            active={userTurn ? true : false}\n            showInfo={true}\n          />\n        </div>\n      ) : (\n        <Setup\n          windowWidth={windowWidth}\n          showIntro={showIntro}\n          sendUserBoard={handleUserBoard}\n          toggleShowIntro={toggleShowIntro}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}