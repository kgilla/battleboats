{"version":3,"sources":["game_classes/boat/boat_class.js","game_classes/gameboard/gameboard_class.js","game_classes/player/player_class.js","game_classes/game/game_class.js","components/BoardInfo/BoardInfo.js","components/Gameboard/Gameboard.js","components/Navbar/Navbar.js","components/Boatyard/Boatyard.js","components/SetupIntro/SetupIntro.js","components/Setup/Setup.js","components/GameOver/GameOver.js","components/Rules/Rules.js","components/TurnChange/TurnChange.js","components/App/App.js","index.js"],"names":["Boat","name","length","handleHit","hitsLeft","isSunk","this","hit","Gameboard","board","checkSpace","coords","newBoard","slice","data","isHit","attackBoat","response","boat","sinkShip","shipsLeft","map","col","square","boats","quantity","size","create","game","x","push","y","generateRandomBoats","random","forEach","i","newBoat","findSpaces","orientation","Math","floor","space","generateRandomSpace","attemptPlacingBoat","updateBoard","getCoords","getRandomInt","boatData","makeBoatData","check","makeRandomBoatData","anyCoordsOutside","checkCoordArray","coordExists","some","coord","testCoords","test","c","element","boardData","receiveAttack","min","max","ceil","Player","enemyGameBoard","userMakeMove","move","verifyMoveIsLegal","makeMoveOnBoard","makeChoiceArray","array","makeSmartChoiceArray","makeSmartChoices","newArray","choicesLeft","compMakeMove","lastMove","assessLastMove","result","logMove","makeRandomMove","makeRandomChoice","choice","smartChoices","filterChoices","choiceArray","find","filter","results","direction","prevMoves","continueAttack","hits","filterHits","plotNextMove","attemptReverse","determineAndFilter","useHitsArray","nextMoves","makeNextMoves","filteredMoves","filterNextMoves","moves","nextMove","m","determineNextAttack","newDirection","reverseDirection","newMove","Game","userTurn","user","playerOne","win","checkWin","compTurn","comp","playerTwo","player","createPlayer","computer","BoardInfo","props","className","title","Board","info","colInfo","rowInfo","handleEdit","e","newCoords","dataToCoords","handleMove","handleInput","determineClass","cell","determineBoat","determineInner","handleDragOver","preventDefault","handleDrop","sendCoord","target","attributes","value","split","parseInt","active","row","onClick","onDragOver","onDrop","showInfo","Navbar","useState","showMenu","setShowMenu","handleClick","innerText","newGame","toggleRules","toggleMenu","windowWidth","href","id","Boatyard","sendBoatOrientation","handleOffsetX","determineSquareSize","offset","nativeEvent","offsetX","sendOffset","handleOffsetY","offsetY","draggable","onDragStart","toLowerCase","createBoat","SetupIntro","introChange","Setup","gameboard","setGameboard","setBoard","setBoats","setOrientation","setOffset","useEffect","init","newBoats","handleIntroChange","toggleShowIntro","showIntro","num","newCoord","calcOffset","newData","ele","disabled","sendUserBoard","GameOver","message","handleNewGame","Rules","TurnChange","App","setGame","isGameOver","setIsGameOver","winData","setWinData","gameStarted","setGameStarted","boardOne","setBoardOne","boardOneData","setBoardOneData","boardTwo","setBoardTwo","boardTwoData","setBoardTwoData","setUserTurn","showRules","setShowRules","setShowIntro","window","innerWidth","setWindowWidth","showTurn","setShowTurn","addEventListener","playerWin","compWin","takeCompTurn","handleGameOver","setTimeout","changeTurn","input","startGame","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2ZAoBeA,EAnBb,WAAYC,EAAMC,GAAS,IAAD,gCAQ1BC,UAAY,WAEV,OADA,EAAKC,WACiB,IAAlB,EAAKA,UACP,EAAKC,QAAS,EACP,GAEA,GAbTC,KAAKL,KAAOA,EACZK,KAAKF,SAAWF,EAChBI,KAAKD,QAAS,EACdC,KAAKJ,OAASA,EACdI,KAAKC,IAAM,kBAAM,EAAKJ,cCqLXK,E,WAxLb,WAAYC,GAAQ,IAAD,gCAOnBC,WAAa,SAACC,GACZ,IAAIC,EAAW,EAAKH,MAAMI,QACtBC,EAAOF,EAASD,EAAO,IAAIA,EAAO,IAEtC,OADA,EAAKF,MAAQG,EACA,OAATE,GACFF,EAASD,EAAO,IAAIA,EAAO,IAAM,IAC1B,CAAEI,OAAO,EAAOV,QAAQ,EAAOO,aAE/B,EAAKI,WAAWF,EAAMF,EAAUD,IAfxB,KAmBnBK,WAAa,SAACF,EAAMF,GAClB,IAAIK,EAAWH,EAAKI,KAAKX,MAMzB,OALAO,EAAKC,OAAQ,GACW,IAApBE,EAASZ,SACXO,EAAW,EAAKO,SAASL,EAAMF,IAEjC,EAAKH,MAAQG,EACN,CACLG,OAAO,EACPV,OAAQY,EAASZ,OACjBY,WACAL,WACAM,KAAMJ,EAAKI,OA/BI,KAmCnBC,SAAW,SAACL,EAAMF,GAehB,OAdA,EAAKQ,WAAa,EAClBR,EAASS,KAAI,SAACC,GACZ,OAAOA,EAAID,KAAI,SAACE,GACd,OAAe,OAAXA,GACEA,EAAOL,OAASJ,EAAKI,KACfK,EAAOlB,QAAS,EAKnBkB,QAINX,GAlDU,KAqDnBY,MAAQ,CACN,CAAEvB,KAAM,UAAWwB,SAAU,EAAGC,KAAM,GACtC,CAAEzB,KAAM,aAAcwB,SAAU,EAAGC,KAAM,GACzC,CAAEzB,KAAM,YAAawB,SAAU,EAAGC,KAAM,GACxC,CAAEzB,KAAM,YAAawB,SAAU,EAAGC,KAAM,IAzDvB,KA4DnBC,OAAS,WAEP,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3BD,EAAKE,KAAK,IACV,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACtBH,EAAKC,GAAGE,GAAK,KAGjB,OAAOH,GApEU,KAuEnBI,oBAAsB,WACpB,EAAKC,QAAS,EACd,EAAKT,MAAMU,SAAQ,SAAChB,GAClB,IAAK,IAAIiB,EAAI,EAAGA,EAAIjB,EAAKO,SAAUU,IAAK,CACtC,IAAIC,EAAU,IAAIpC,EAAKkB,EAAKjB,KAAMiB,EAAKQ,MACvC,EAAKW,WAAWnB,EAAKQ,KAAMU,QA5Ed,KAiFnBC,WAAa,SAACX,EAAMR,GAClB,IAAIoB,EAAcC,KAAKC,MAAsB,EAAhBD,KAAKN,UAC9BQ,EAAQ,EAAKC,oBAAoBhB,EAAMY,GACvCxB,EAAO,EAAK6B,mBAAmBjB,EAAMe,EAAOH,GAChDxB,EAAO,EAAK8B,YAAY9B,EAAMI,GAAQ,EAAKmB,WAAWX,EAAMR,IArF3C,KAwFnBwB,oBAAsB,SAAChB,EAAMY,GAC3B,IAAI3B,EAAS,EAAKkC,UAAUnB,EAAMY,GAElC,OAAiB,OADL,EAAK7B,MAAME,EAAO,IAAIA,EAAO,IAErCA,EACA,EAAK+B,oBAAoBhB,EAAMY,IA7FlB,KAgGnBO,UAAY,SAACnB,EAAMY,GACjB,OAAuB,IAAhBA,EACH,CAAC,EAAKQ,aAAa,EAAG,GAAI,EAAKA,aAAa,EAAGpB,IAC/C,CAAC,EAAKoB,aAAa,EAAGpB,GAAO,EAAKoB,aAAa,EAAG,KAnGrC,KA4GnBH,mBAAqB,SAACjB,EAAMe,EAAOH,GACjC,IAAIS,EAAW,EAAKC,aAAatB,EAAMe,EAAOH,GAC1CW,EAAQ,EAAKhB,OACb,EAAKiB,mBAAmBxB,EAAMe,EAAOH,GACrCS,EACJ,OAAK,EAAKI,iBAAiBJ,MACR,EAAKK,gBAAgBH,IACVF,IAnHb,KAyHnBC,aAAe,SAACtB,EAAMe,EAAOH,GAC3B,IAAIxB,EAAO,GACX,GAAoB,IAAhBwB,EACF,IAAK,IAAIP,EAAIU,EAAM,GAAIV,EAAIU,EAAM,GAAKf,EAAMK,IAC1CjB,EAAKgB,KAAK,CAACW,EAAM,GAAIV,SAGvB,IAAK,IAAIF,EAAIY,EAAM,GAAIZ,EAAIY,EAAM,GAAKf,EAAMG,IAC1Cf,EAAKgB,KAAK,CAACD,EAAGY,EAAM,KAGxB,OAAO3B,GApIU,KAuInBoC,mBAAqB,SAACxB,EAAMe,EAAOH,GACjC,IAAIxB,EAAO,GACX,GAAoB,IAAhBwB,EACF,IAAK,IAAIP,EAAIU,EAAM,GAAK,EAAGV,EAAIU,EAAM,IAAMf,EAAO,GAAIK,IAChD,EAAKsB,YAAY,CAACZ,EAAM,GAAIV,KAAKjB,EAAKgB,KAAK,CAACW,EAAM,GAAIV,SAG5D,IAAK,IAAIF,EAAIY,EAAM,GAAK,EAAGZ,EAAIY,EAAM,IAAMf,EAAO,GAAIG,IAChD,EAAKwB,YAAY,CAACxB,EAAGY,EAAM,MAAM3B,EAAKgB,KAAK,CAACD,EAAGY,EAAM,KAG7D,OAAO3B,GAlJU,KAqJnBqC,iBAAmB,SAACxC,GAClB,OAAOA,EAAO2C,MAAK,SAACC,GAAD,OAAY,EAAKF,YAAYE,OAtJ/B,KAyJnBF,YAAc,SAACE,GACb,OAAIA,EAAM,GAAK,IAAMA,EAAM,IAAM,GAC3BA,EAAM,GAAK,IAAMA,EAAM,IAAM,GA3JlB,KAkKnBH,gBAAkB,SAACI,GACjB,IAAIC,EAAO,GAIX,OAHAD,EAAWtB,SAAQ,SAACwB,GAClBD,EAAK3B,KAAK,EAAKrB,MAAMiD,EAAE,IAAIA,EAAE,QAExBD,EAAKH,MAAK,SAACK,GAAD,OAAyB,OAAZA,MAvKb,KA0KnBf,YAAc,SAAC9B,EAAMI,GACnB,IAAIN,EAAW,EAAKH,MAAMI,QAC1BC,EAAKoB,SAAQ,SAACqB,GACZ,IAAIK,EAAY,CACd7C,OAAO,EACPV,QAAQ,EACRa,QAEFN,EAAS2C,EAAM,IAAIA,EAAM,IAAMK,KAEjC,EAAKnD,MAAQG,GAnLbN,KAAKG,MAAQA,GAAgBH,KAAKqB,SAClCrB,KAAKuD,cAAgB,SAAClD,GAAD,OAAY,EAAKD,WAAWC,IACjDL,KAAKc,UAAY,GACjBd,KAAK2B,QAAS,E,yDAkGH6B,EAAKC,GAGhB,OAFAD,EAAMvB,KAAKyB,KAAKF,GAChBC,EAAMxB,KAAKC,MAAMuB,GACVxB,KAAKC,MAAMD,KAAKN,UAAY8B,EAAMD,EAAM,IAAMA,M,KCqJ1CG,EAhQb,WAAYC,GAAiB,IAAD,gCAQ5BC,aAAe,SAACxD,GACd,IAAIyD,EAAO,CAAEzD,UACb,OAAI,EAAK0D,kBAAkBD,GAClB,EAAKE,gBAAgB3D,QAE5B,GAbwB,KAiB5B4D,gBAAkB,WAEhB,IADA,IAAIC,EAAQ,GACH3C,EAAI,EAAGA,EAAI,GAAIA,IACtB,IAAK,IAAIE,EAAI,EAAGA,EAAI,GAAIA,IACtByC,EAAM1C,KAAK,CAAED,EAAGA,EAAGE,EAAGA,IAG1B,OAAOyC,GAxBmB,KA2B5BC,qBAAuB,WAGrB,IAFA,IAAID,EAAQ,CAAC,GACTrC,EAAI,EACDA,EAAI,KAAK,CACd,IAAK,IAAIN,EAAI,EAAGA,EAAI,EAAGA,IACrBM,GAAK,EACLqC,EAAM1C,KAAKK,GAEEA,GAAfA,EAAI,IAAM,EAAU,EAAW,EAC/BqC,EAAM1C,KAAKK,GAEb,OAAOqC,GAtCmB,KAyC5BE,iBAAmB,WACjB,IAAIF,EAAQ,EAAKC,uBACbE,EAAW,GAGf,OAFAH,EAAMtC,SAAQ,SAACC,GAAD,OAAOwC,EAAS7C,KAAK,EAAK8C,YAAYzC,OACpDwC,EAAWA,EAAS9D,MAAM,EAAG,KA7CH,KAiD5BgE,aAAe,WACb,GAAI,EAAKC,SAAU,CACjB,IAAIhE,EAAO,EAAKiE,iBACZC,EAAS,EAAKV,gBAAgBxD,EAAKH,QAEvC,OADA,EAAKsE,QAAQnE,EAAMkE,GACZA,EAEP,OAAO,EAAKE,kBAxDY,KA4D5BA,eAAiB,WACf,IAAIpE,EAAO,EAAKqE,mBACZH,EAAS,EAAKV,gBAAgBxD,EAAKH,QAEvC,OADA,EAAKsE,QAAQnE,EAAMkE,GACZA,GAhEmB,KAmE5BG,iBAAmB,WACjB,IAAIC,EAAS7C,KAAKC,MAAMD,KAAKN,SAAW,EAAKoD,aAAanF,QAE1D,MAAO,CAAES,OADI,CAAC,EAAK0E,aAAaD,GAAQvD,EAAG,EAAKwD,aAAaD,GAAQrD,KArE3C,KAyE5BuD,cAAgB,SAAC3E,EAAQ4E,GACvB,IAAIf,EAAQe,EAAY1E,QACpBuE,EAASZ,EAAMgB,MAAK,SAAC9B,GAAD,OAAOA,EAAE7B,IAAMlB,EAAO,IAAM+C,EAAE3B,IAAMpB,EAAO,MAEnE,OADA6D,EAAQA,EAAMiB,QAAO,SAAC/B,GAAD,OAAOA,IAAM0B,MA5ER,KAgF5Bd,gBAAkB,SAACF,GAGjB,OAFA,EAAKQ,YAAc,EAAKU,cAAclB,EAAM,EAAKQ,aACjD,EAAKS,aAAe,EAAKC,cAAclB,EAAM,EAAKiB,cAC3C,EAAKnB,eAAeL,cAAcO,IAnFf,KAsF5Ba,QAAU,SAACnE,EAAM4E,GAAa,IACtB/E,EAAiDG,EAAjDH,OAAQgF,EAAyC7E,EAAzC6E,UAAWC,EAA8B9E,EAA9B8E,UAAWC,EAAmB/E,EAAnB+E,eAC9B9E,EAAwB2E,EAAxB3E,MAAOV,EAAiBqF,EAAjBrF,OAAQa,EAASwE,EAATxE,KACrB,EAAK4D,SAAW,CACdnE,SACAI,QACAV,SACAsF,YACAC,YACA1E,OACA2E,kBAEE,EAAKf,SAAS/D,QAAU,EAAK+D,SAASzE,QACxC,EAAKyF,KAAKhE,KAAK,EAAKgD,UAElB,EAAKA,SAASzE,QAChB,EAAK0F,cAtGmB,KA0G5BhB,eAAiB,WACf,OAAI,EAAKD,SAAS/D,QAAU,EAAK+D,SAASzE,OACpC,EAAKyE,SAASa,UACT,EAAKE,iBAEL,EAAKG,eAEL,EAAKlB,SAASe,iBAAmB,EAAKf,SAASzE,OACjD,EAAK4F,eAAe,EAAKnB,UACvB,EAAKA,SAASc,YAAc,EAAKd,SAASzE,OAC5C,EAAK6F,mBAAmB,EAAKpB,SAASc,WACpC,EAAKE,KAAK5F,OAAS,EACjB,EAAKiG,eAGT,EAAKhB,oBAzHY,KA6H5BgB,aAAe,WACb,EAAKrB,SAAW,EAAKgB,KAAK,GAC1B,IAAIM,EAAY,EAAKC,cAAc,EAAKvB,SAASnE,QAC7C2F,EAAgB,EAAKC,gBAAgBH,GACzC,OAAIE,EAAcpG,OAAS,GACzB,EAAK6F,aACE,EAAKG,mBAAmBI,KAE/B,EAAKP,aACD,EAAKD,KAAK5F,OAAS,EACd,EAAKiG,eAEL,EAAKhB,qBAzIU,KA8I5Be,mBAAqB,SAACM,GACpB,GAAIA,EAAMtG,OAAS,EAAG,CACpB,IAAIuG,EAAWD,EAAMjE,KAAKC,MAAMD,KAAKN,SAAWuE,EAAMtG,SAClDoG,EAAgBE,EAAMf,QAAO,SAACiB,GAAD,OAAOA,IAAMD,KAC9C,MAAO,CACL9F,OAAQ8F,EAAS9F,OACjBgF,UAAWc,EAASd,UACpBC,UAAWU,GAGb,MAAO,CACL3F,OAAQ6F,EAAM,GAAG7F,OACjBgF,UAAWa,EAAM,GAAGb,UACpBC,UAAW,KA3JW,KAgK5BC,eAAiB,WACf,IAAIzB,EAAO,EAAKuC,oBAAoB,EAAK7B,SAASnE,QAClD,OAAI,EAAK0D,kBAAkBD,GAClBA,EAEA,EAAK6B,eAAe,EAAKnB,WArKR,KAyK5BmB,eAAiB,SAAC7B,GAChB,IAAIwC,EAAe,EAAKC,iBAAiBzC,EAAKuB,WAC1CmB,EAAU1C,EAAKwB,UACfxB,EAAKwB,UAAUJ,MAAK,SAACkB,GAAD,OAAOA,EAAEf,YAAciB,KAC3C,GACJ,OAAI,EAAKvC,kBAAkByC,GAClBA,EACE,EAAKhB,KAAK5F,OAAS,EACrB,EAAKiG,eAEL,EAAKhB,oBAnLY,KAuL5B0B,iBAAmB,SAAClB,GAClB,MAAkB,UAAdA,EACK,QACgB,UAAdA,EACF,QACgB,SAAdA,EACF,OAEA,QA/LiB,KAmM5BgB,oBAAsB,SAACjD,GAWrB,MAAO,CACL/C,OAV8B,UAA5B,EAAKmE,SAASa,UACP,CAACjC,EAAE,GAAIA,EAAE,GAAK,GACc,SAA5B,EAAKoB,SAASa,UACd,CAACjC,EAAE,GAAK,EAAGA,EAAE,IACe,UAA5B,EAAKoB,SAASa,UACd,CAACjC,EAAE,GAAIA,EAAE,GAAK,GAEd,CAACA,EAAE,GAAK,EAAGA,EAAE,IAItBiC,UAAW,EAAKb,SAASa,UACzBC,UAAW,EAAKd,SAASc,UACzBC,gBAAgB,IAlNQ,KAsN5BxB,kBAAoB,SAACD,GACnB,QAAIA,GACK,EAAKQ,YAAYtB,MACtB,SAACC,GAAD,OAAWA,EAAM1B,IAAMuC,EAAKzD,OAAO,IAAM4C,EAAMxB,IAAMqC,EAAKzD,OAAO,OAzN3C,KAgO5BqF,aAAe,WACb,IAAII,EAAY,EAAKC,cAAc,EAAKvB,SAASnE,QAC7C2F,EAAgB,EAAKC,gBAAgBH,GACzC,OAAOE,EAAcpG,OAAS,EAC1B,EAAKgG,mBAAmBI,GACxB,EAAKnB,oBArOiB,KAwO5BkB,cAAgB,SAACjC,GACf,MAAO,CACL,CAAEzD,OAAQ,CAACyD,EAAK,GAAIA,EAAK,GAAK,GAAIuB,UAAW,SAC7C,CAAEhF,OAAQ,CAACyD,EAAK,GAAK,EAAGA,EAAK,IAAKuB,UAAW,QAC7C,CAAEhF,OAAQ,CAACyD,EAAK,GAAIA,EAAK,GAAK,GAAIuB,UAAW,SAC7C,CAAEhF,OAAQ,CAACyD,EAAK,GAAK,EAAGA,EAAK,IAAKuB,UAAW,UA7OrB,KAiP5BY,gBAAkB,SAACH,GACjB,IAAIE,EAAgB,GAMpB,OALAF,EAAUlE,SAAQ,SAACkC,GACb,EAAKC,kBAAkBD,IACzBkC,EAAcxE,KAAKsC,MAGhBkC,GAxPmB,KA2P5BP,WAAa,WACX,EAAKD,KAAO,EAAKA,KAAKL,QAAO,SAAClF,GAAD,OAAUA,EAAIW,KAAKb,WA3PhDC,KAAK4D,eAAiBA,EACtB5D,KAAKsE,YAActE,KAAKiE,kBACxBjE,KAAK+E,aAAe/E,KAAKoE,mBACzBpE,KAAKwE,SAAW,GAChBxE,KAAKwF,KAAO,IC8BDiB,EAhCb,WAAYtG,GAAQ,IAAD,gCAKnBuG,SAAW,SAACrG,GACV,IAAIsG,EAAO,EAAKC,UAAU/C,aAAaxD,GACvC,OAAIsG,GACFA,EAAKE,IAAM,EAAKC,SAAS,EAAKF,WACvBD,QAEP,GAXe,KAenBI,SAAW,WACT,IAAIC,EAAO,EAAKC,UAAU1C,eAE1B,OADAyC,EAAKH,IAAM,EAAKC,SAAS,EAAKG,WACvBD,GAlBU,KAqBnBF,SAAW,SAACI,GACV,OAA2C,IAApCA,EAAOtD,eAAe9C,WAtBZ,KAyBnBqG,aAAe,SAACC,GAA0B,IAAhBjH,EAAe,uDAAP,GAC5BmB,EAAO,IAAIpB,EAAUC,GAEzB,MADc,KAAVA,GAAcmB,EAAKI,sBAChB,IAAIiC,EAAOrC,EAAM8F,IA3BxBpH,KAAK4G,UAAY5G,KAAKmH,cAAa,GACnCnH,KAAKiH,UAAYjH,KAAKmH,cAAa,EAAMhH,ICK9BkH,G,MATG,SAACC,GACjB,OACE,sBAAKC,UAA2B,eAAhBD,EAAME,MAAyB,YAAc,UAA7D,UACE,oBAAID,UAAU,aAAd,SAA4BD,EAAME,QAClC,qBAAID,UAAU,kBAAd,yBAA6CD,EAAMxG,kBC4H1C2G,EA7HD,SAACH,GACb,IAAMI,EAAO,CACXC,QAAS,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IACzCC,QAAS,CAAC,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAGvDC,EAAa,SAACC,GAClB,IAAIC,EAAYC,EAAaF,GAC7BR,EAAMO,WAAWP,EAAMnH,MAAM4H,EAAU,IAAIA,EAAU,MAGjDE,EAAa,SAACH,GAClB,IAAIC,EAAYC,EAAaF,GAC7BR,EAAMY,YAAYH,IAGdI,EAAiB,SAACC,GACtB,OAAa,OAATA,EACEA,EAAKrI,OACA,UACW,MAATqI,EACF,aACEA,EAAK3H,MACP,YACE6G,EAAMY,YACR,cAEAG,EAAcD,GAEdd,EAAMY,YACR,cAEA,gBAILG,EAAgB,SAACD,GACrB,MAAuB,YAAnBA,EAAKxH,KAAKjB,KACL,UACqB,eAAnByI,EAAKxH,KAAKjB,KACZ,aACqB,cAAnByI,EAAKxH,KAAKjB,KACZ,YAEA,aAIL2I,EAAiB,SAACF,GACtB,GAAa,OAATA,EAAe,CACjB,GAAIA,EAAKrI,QAAUqI,EAAK3H,MACtB,MAAO,IACF,GAAa,MAAT2H,EACT,MAAO,MAKPG,EAAiB,SAACT,GACtBA,EAAEU,kBAGEC,EAAa,SAACX,GAClBA,EAAEU,iBACF,IAAIvH,EAAS+G,EAAaF,GAC1BR,EAAMoB,UAAUzH,IAGZ+G,EAAe,SAACF,GACpB,IAAI7G,EAAS6G,EAAEa,OAAOC,WAAW,GAAGC,MAAMC,MAAM,KAIhD,OAHA7H,EAASA,EAAOF,KAAI,SAACkC,GACnB,OAAO8F,SAAS9F,OAKpB,OACE,sBAAKsE,UAAWD,EAAM0B,OAAS,SAAW,WAA1C,UACE,sBAAKzB,UAAU,sBAAf,UACE,qBAAKA,UAAU,qBAAf,SACGG,EAAKE,QAAQ7G,KAAI,SAACkI,EAAKpH,GAAN,OAChB,qBAAK0F,UAAU,cAAf,SACG0B,GAD+BpH,QAKtC,qBAAK0F,UAAU,qBAAf,SACGG,EAAKC,QAAQ5G,KAAI,SAACC,EAAKa,GAAN,OAChB,qBAAK0F,UAAU,cAAf,SACGvG,GAD+Ba,QAKtC,qBAAK0F,UAAU,YAAf,SACGD,EAAMnH,MAAMY,KAAI,SAACkI,EAAK1H,GAAN,OACf,qBAAKgG,UAAU,mBAAf,SACG0B,EAAIlI,KAAI,SAACqH,EAAM3G,GAAP,OACP,qBAEEjB,KAAM,CAACe,EAAGE,GACV8F,UAAWY,EAAeC,GAC1Bc,QACE5B,EAAMY,YACFD,EACAX,EAAMO,WACNA,EACA,KAENsB,WAAYZ,EACZa,OAAQX,EAZV,SAcGH,EAAeF,IAdlB,UACU7G,EADV,YACeE,QAHoBF,WAuB5C+F,EAAM+B,SACL,cAAC,EAAD,CAAWvI,UAAWwG,EAAMxG,UAAW0G,MAAOF,EAAME,QAClD,S,wBChDK8B,EAzEA,SAAChC,GAAW,IAAD,EACQiC,oBAAS,GADjB,mBACjBC,EADiB,KACPC,EADO,KAGlBC,EAAc,SAAC5B,GACf0B,GAAUC,GAAY,GACH,aAAvB3B,EAAEa,OAAOgB,UAA2BrC,EAAMsC,UAAYtC,EAAMuC,eAGxDC,EAAa,WACNL,GAAXD,IAGF,OACE,qBAAKjC,UAAU,gBAAf,SACE,sBAAKA,UAAU,WAAf,UACE,oBAAIA,UAAU,YAAd,0BACCD,EAAMyC,YAAc,IACnB,qBAAIxC,UAAU,YAAd,UACG,IACD,wBAAQA,UAAU,aAAa2B,QAASQ,EAAxC,mBAEU,IACV,wBAAQnC,UAAU,aAAa2B,QAASQ,EAAxC,sBAGA,mBACEM,KAAK,wCACLrB,OAAO,SACPpB,UAAU,YAHZ,SAKE,cAAC,IAAD,CAAQA,UAAU,cAItB,wBAAQA,UAAU,aAAa2B,QAASY,EAAxC,kBAIDN,EACC,qBAAKjC,UAAU,UAAf,SACE,sBAAKA,UAAU,WAAf,UACE,oBAAIA,UAAU,mBAAd,0BAAmD,IACnD,qBAAIA,UAAU,aAAd,UACG,IACD,wBAAQA,UAAU,eAAe2B,QAASQ,EAA1C,sBAGA,wBAAQnC,UAAU,eAAe2B,QAASQ,EAA1C,mBAEU,IACV,wBACEnC,UAAU,eACV0C,GAAG,cACHf,QAASY,EAHX,0BAMU,IACV,mBACEE,KAAK,wCACLrB,OAAO,SACPpB,UAAU,YAHZ,SAKE,cAAC,IAAD,CAAQA,UAAU,mBAKxB,W,QCGG2C,G,YAvEE,SAAC5C,GAChB,IAAMoC,EAAc,SAAC5B,GACG,IAAtBR,EAAMtF,YACFsF,EAAM6C,oBAAoB,GAC1B7C,EAAM6C,oBAAoB,IAO1BC,EAAgB,SAACtC,GACrB,IAAI1G,EAAOiJ,IACPC,EAASxC,EAAEyC,YAAYC,QAAUpJ,EACrCkJ,EAASrI,KAAKyB,KAAK4G,EAASlJ,GAC5BkG,EAAMmD,WAAWH,IAGbI,EAAgB,SAAC5C,GACrB,IAAI1G,EAAOiJ,IACPC,EAASxC,EAAEyC,YAAYI,QAAUvJ,EACrCkJ,EAASrI,KAAKyB,KAAK4G,EAASlJ,GAC5BkG,EAAMmD,WAAWH,IAGbD,EAAsB,WAC1B,OAAO/C,EAAMyC,YAAc,IACvB,GACAzC,EAAMyC,YAAc,IACpB,GACAzC,EAAMyC,YAAc,KACpB,GACA,IAaN,OACE,sBAAKxC,UAAU,WAAf,UACE,oBAAIA,UAAU,iBAAd,8BACA,qBAAKA,UAAU,OAAO2B,QAASQ,EAA/B,SACGpC,EAAMpG,MAAMtB,OAAS,EACpB,qBACE2H,UACwB,IAAtBD,EAAMtF,YAAoB,kBAAoB,gBAEhD4I,WAAS,EACTC,YAhDc,SAAC/C,GACD,IAAtBR,EAAMtF,YAAoBoI,EAActC,GAAK4C,EAAc5C,IAgDnDoB,QAASQ,EANX,SAQGpC,EAAMpG,MAAMtB,OAAS,EAvBb,WAEjB,IADA,IAAIgB,EAAO,GACFiB,EAAI,EAAGA,EAAIyF,EAAMpG,MAAM,GAAGtB,OAAQiC,IACzCjB,EAAKY,KACH,qBAAa+F,UAAWD,EAAMpG,MAAM,GAAGvB,KAAKmL,eAAlCjJ,IAGd,OAAOjB,EAgB2BmK,GAAe,OAG3C,oBAAIxD,UAAU,YAAd,wBAGHD,EAAMpG,MAAMtB,OAAS,EACpB,oBAAI2H,UAAU,YAAd,SAA2BD,EAAMpG,MAAM,GAAGvB,OACxC,UClCKqL,G,MAhCI,SAAC1D,GAKlB,OACE,sBAAKC,UAAU,UAAf,UACG,IACD,sBAAKA,UAAU,wBAAf,UACE,oBAAIA,UAAU,sBAAd,wBACA,qBAAIA,UAAU,mBAAd,UACE,oBAAIA,UAAU,kBAAd,uDAGA,oBAAIA,UAAU,kBAAd,4EAGA,oBAAIA,UAAU,kBAAd,oEAGA,oBAAIA,UAAU,kBAAd,sEAIF,wBAAQA,UAAU,eAAe2B,QAvBnB,WAClB5B,EAAM2D,eAsBF,kCC2HOC,EA5ID,SAAC5D,GAAW,IAAD,EACWiC,mBAAS,IADpB,mBAChB4B,EADgB,KACLC,EADK,OAEG7B,mBAAS,IAFZ,mBAEhBpJ,EAFgB,KAETkL,EAFS,OAGG9B,mBAAS,IAHZ,mBAGhBrI,EAHgB,KAGToK,EAHS,OAIe/B,mBAAS,GAJxB,mBAIhBvH,EAJgB,KAIHuJ,EAJG,OAKKhC,mBAAS,GALd,mBAKhBe,EALgB,KAKRkB,EALQ,KAOvBC,qBAAU,WACRC,MACC,IAEH,IA6BMpJ,EAAc,WAClB+I,EAASF,EAAUhL,QAkBfuL,EAAO,WACX,IAAIpL,EAAW,IAAIJ,EACnBkL,EAAa9K,GACb+K,EAAS/K,EAASH,OAClB,IAAIwL,EAAW,GACfrL,EAASY,MAAMU,SAAQ,SAAChB,GACtB,IAAK,IAAIiB,EAAI,EAAGA,EAAIjB,EAAKO,SAAUU,IACjC8J,EAASnK,KAAK,IAAI9B,EAAKkB,EAAKjB,KAAMiB,EAAKQ,UAG3CkK,EAASK,IAsBLC,EAAoB,WACxBtE,EAAMuE,mBAGR,OACE,sBAAKtE,UAAU,kBAAf,UACGD,EAAMwE,UAAY,cAAC,EAAD,CAAYb,YAAaW,IAAwB,KACnET,EACC,sBAAK5D,UAAU,uBAAf,UACE,cAAC,EAAD,CACErG,MAAOA,EACPc,YAAaA,EACbmI,oBA5FmB,SAACnI,GAC5BuJ,EAAevJ,IA4FPyI,WApEW,SAACsB,GACpBP,EAAUO,IAoEFhC,YAAazC,EAAMyC,cAErB,qBAAKxC,UAAU,kBAAf,SACE,cAAC,EAAD,CACEpH,MAAOA,EACPuI,UAzFQ,SAACzF,GACnB,IAAI+I,EAPa,SAAC/I,GAClB,OAAuB,IAAhBjB,EACH,CAACiB,EAAM,GAAKqH,EAAQrH,EAAM,IAC1B,CAACA,EAAM,GAAIA,EAAM,GAAKqH,GAIX2B,CAAWhJ,GACtBiJ,EAAUf,EAAU9I,mBACtBnB,EAAM,GAAGtB,OACToM,EACAhK,GAEF,GAAIkK,EAAS,CACXf,EAAU7I,YAAY4J,EAAShL,EAAM,IACrC,IAAIyK,EAAWzK,EAAMX,MAAM,GAC3B+K,EAASK,GACTrJ,MA+EQuF,WAvCc,SAAC5G,GACrBA,IACFqK,EAAS,CAACrK,EAAOL,MAAT,mBAAkBM,KAC1BiK,EAAUhL,MAAQgL,EAAUhL,MAAMY,KAAI,SAACC,GACrC,OAAOA,EAAID,KAAI,SAACoL,GACd,OAAIA,EACEA,EAAIvL,OAASK,EAAOL,KACf,KAEAuL,EAGJ,WAGX7J,aA4BI,KACJ,sBAAKiF,UAAU,mBAAf,UACE,wBAAQA,UAAU,eAAe2B,QArElB,WACnBiC,EAAUhL,MAAQgL,EAAU9J,SAC5B8J,EAAUzJ,sBACV4J,EAAS,IACThJ,KAiEI,0BAGA,wBAAQiF,UAAU,eAAe2B,QAjEnB,WAClBwC,KAgEI,yBAGA,wBAAQnE,UAAU,eAAe2B,QAAS0C,EAA1C,oBAGC1K,EAAMtB,OAAS,EACd,wBAAQwM,UAAQ,EAAC7E,UAAU,eAA3B,wBAIA,wBAAQ2B,QAvFQ,WACtB5B,EAAM+E,cAAclM,IAsFoBoH,UAAU,eAA5C,+BCxHK+E,G,MAlBE,SAAChF,GAKhB,OACE,qBAAKC,UAAU,UAAf,SACE,sBAAKA,UAAWD,EAAM9G,KAAKqG,IAAM,UAAY,WAA7C,UACE,oBAAIU,UAAU,mBAAd,SAAkCD,EAAM9G,KAAKgH,QAC7C,mBAAGD,UAAU,mBAAb,SAAiCD,EAAM9G,KAAK+L,UAC5C,wBAAQhF,UAAU,kBAAkB2B,QATtB,WAClB5B,EAAMkF,iBAQF,gCCkEOC,G,MA5ED,SAACnF,GAIb,OACE,qBAAKC,UAAU,UAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,sBAAKA,UAAU,aAAf,UACG,IACD,oBAAIA,UAAU,gBAAd,wBACA,+BACG,IACD,oBAAIA,UAAU,OAAd,kGAIA,oBAAIA,UAAU,OAAd,0FAIA,oBAAIA,UAAU,OAAd,mGAMJ,sBAAKA,UAAU,yBAAf,UACE,oBAAIA,UAAU,gBAAd,0BACA,qBAAIA,UAAU,eAAd,UACG,IACD,sBAAKA,UAAU,cAAf,UACG,IACD,wCACA,qBAAKA,UAAU,eAEjB,sBAAKA,UAAU,cAAf,UACG,IACD,2CACA,qBAAKA,UAAU,kBAEjB,sBAAKA,UAAU,cAAf,UACG,IACD,0CACA,qBAAKA,UAAU,iBAEjB,sBAAKA,UAAU,cAAf,UACG,IACD,0CACA,qBAAKA,UAAU,iBAEjB,sBAAKA,UAAU,cAAf,UACG,IACD,sCACA,qBAAKA,UAAU,YAAf,kBAEF,sBAAKA,UAAU,cAAf,UACG,IACD,uCACA,qBAAKA,UAAU,aAAf,kBAEF,sBAAKA,UAAU,cAAf,UACG,IACD,4CACA,qBAAKA,UAAU,UAAf,wBAKN,wBAAQA,UAAU,eAAe2B,QAnEnB,WAClB5B,EAAMuC,eAkEF,4BC5DO6C,G,MARI,SAACpF,GAClB,OACE,qBAAKC,UAAWD,EAAMZ,SAAW,YAAc,WAA/C,SACGY,EAAMZ,SAAW,aAAe,sBCyKxBiG,MAnKf,WAAgB,IAAD,EACWpD,mBAAS,IADpB,mBACNjI,EADM,KACAsL,EADA,OAEuBrD,oBAAS,GAFhC,mBAENsD,EAFM,KAEMC,EAFN,OAGiBvD,mBAAS,IAH1B,mBAGNwD,EAHM,KAGGC,EAHH,OAIyBzD,oBAAS,GAJlC,mBAIN0D,EAJM,KAIOC,EAJP,OAKmB3D,mBAAS,IAL5B,mBAKN4D,EALM,KAKIC,EALJ,OAM2B7D,mBAAS,IANpC,mBAMN8D,EANM,KAMQC,EANR,OAOmB/D,mBAAS,IAP5B,mBAONgE,EAPM,KAOIC,EAPJ,OAQ2BjE,mBAAS,IARpC,mBAQNkE,EARM,KAQQC,EARR,OASmBnE,oBAAS,GAT5B,mBASN7C,EATM,KASIiH,EATJ,OAUqBpE,oBAAS,GAV9B,mBAUNqE,EAVM,KAUKC,EAVL,OAWqBtE,oBAAS,GAX9B,mBAWNuC,EAXM,KAWKgC,EAXL,QAYyBvE,mBAASwE,OAAOC,YAZzC,qBAYNjE,GAZM,MAYOkE,GAZP,SAamB1E,oBAAS,GAb5B,qBAaN2E,GAbM,MAaIC,GAbJ,MAeb1C,qBAAU,WAIRsC,OAAOK,iBAAiB,UAHG,WACzBH,GAAeF,OAAOC,iBAGvB,IAEH,IAAMK,GAAY,CAChBxH,KAAK,EACLW,MAAO,UACP+E,QAAS,4CAGL+B,GAAU,CACdzH,KAAK,EACLW,MAAO,UACP+E,QAAS,2DAqBLgC,GAAe,SAAfA,IACJ,IAAIvH,EAAO1F,EAAKyF,WAChBzE,GAAY,GACR0E,EAAKH,IACP2H,GAAeF,IACNtH,EAAKvG,MACdgO,YAAW,WACTF,MACC,KAEHE,YAAW,WACTC,KACAf,GAAY,KACX,MAIDe,GAAa,WACjBP,IAAY,GACZM,YAAW,WACTN,IAAY,KACX,MAGC7L,GAAc,SAAC4E,GACJ,IAAXA,GACFkG,EAAY9L,EAAKsF,UAAUhD,eAAezD,OAC1CmN,EAAgBhM,EAAKsF,UAAUhD,kBAE/B4J,EAAYlM,EAAK2F,UAAUrD,eAAezD,OAC1CuN,EAAgBpM,EAAK2F,UAAUrD,kBAI7B4K,GAAiB,SAAChO,GACtBwM,EAAWxM,GACXsM,GAAc,IAoBVN,GAAgB,WACpBU,GAAe,GACfJ,GAAc,IAGVjD,GAAc,WACNgE,GAAZD,IAOF,OACE,sBAAKrG,UAAU,MAAf,UACE,cAAC,EAAD,CACEqC,QAAS4C,GACT3C,YAAaA,GACbE,YAAaA,KAEdmE,GAAW,cAAC,EAAD,CAAYxH,SAAUA,IAAe,KAChDkH,EAAY,cAAC,EAAD,CAAO/D,YAAaA,KAAkB,KAClDgD,EACC,cAAC,EAAD,CAAUrM,KAAMuM,EAASP,cAAeA,KACtC,KACHS,EACC,sBAAK1F,UAAU,kBAAf,UACE,cAAC,EAAD,CACEpH,MAAOoN,EACP/F,MAAM,aACN1G,UAAW2M,EAAa3M,UACxBkI,QAAStC,EACT2C,UAAU,IAEZ,cAAC,EAAD,CACElJ,MAAOgN,EACP3F,MAAM,cACNU,YA/GU,SAACyG,GACnB,GAAIjI,EAAU,CACZ,IAAIC,EAAOrF,EAAKoF,SAASiI,GACrBhI,IACFrE,GAAY,GACRqE,EAAKE,IACP2H,GAAeH,IACL1H,EAAKlG,QACfkN,GAAY,GACZe,KACAD,YAAW,WACTF,OACC,SAoGDzN,UAAWuM,EAAavM,UACxBkI,SAAQtC,EACR2C,UAAU,OAId,cAAC,EAAD,CACEU,YAAaA,GACb+B,UAAWA,EACXO,cAnDgB,SAAClM,IAbP,SAACA,GACjB,IAAIyJ,EAAU,IAAInD,EAAKtG,GACvByM,EAAQhD,GACRwD,EAAYxD,EAAQhD,UAAUhD,eAAezD,OAC7CqN,EAAY5D,EAAQ3C,UAAUrD,eAAezD,OAC7CmN,EAAgB1D,EAAQhD,UAAUhD,gBAClC8J,EAAgB9D,EAAQ3C,UAAUrD,gBAClC+J,GAAY,GACZT,GAAe,GACfJ,GAAc,GACd4B,KAIAE,CAAUzO,IAmDJ0L,gBAvCgB,WACViC,GAAZhC,UC9HJ+C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.49b10a58.chunk.js","sourcesContent":["class Boat {\n  constructor(name, length) {\n    this.name = name;\n    this.hitsLeft = length;\n    this.isSunk = false;\n    this.length = length;\n    this.hit = () => this.handleHit();\n  }\n\n  handleHit = () => {\n    this.hitsLeft--;\n    if (this.hitsLeft === 0) {\n      this.isSunk = true;\n      return this;\n    } else {\n      return this;\n    }\n  };\n}\n\nexport default Boat;\n","import Boat from \"../boat/boat_class\";\n\nclass Gameboard {\n  constructor(board) {\n    this.board = board ? board : this.create();\n    this.receiveAttack = (coords) => this.checkSpace(coords);\n    this.shipsLeft = 10;\n    this.random = false;\n  }\n\n  checkSpace = (coords) => {\n    let newBoard = this.board.slice();\n    let data = newBoard[coords[0]][coords[1]];\n    this.board = newBoard;\n    if (data === null) {\n      newBoard[coords[0]][coords[1]] = \"~\";\n      return { isHit: false, isSunk: false, newBoard };\n    } else {\n      return this.attackBoat(data, newBoard, coords);\n    }\n  };\n\n  attackBoat = (data, newBoard) => {\n    let response = data.boat.hit();\n    data.isHit = true;\n    if (response.isSunk === true) {\n      newBoard = this.sinkShip(data, newBoard);\n    }\n    this.board = newBoard;\n    return {\n      isHit: true,\n      isSunk: response.isSunk,\n      response,\n      newBoard,\n      boat: data.boat,\n    };\n  };\n\n  sinkShip = (data, newBoard) => {\n    this.shipsLeft -= 1;\n    newBoard.map((col) => {\n      return col.map((square) => {\n        if (square !== null) {\n          if (square.boat === data.boat) {\n            return (square.isSunk = true);\n          } else {\n            return square;\n          }\n        } else {\n          return square;\n        }\n      });\n    });\n    return newBoard;\n  };\n\n  boats = [\n    { name: \"Carrier\", quantity: 1, size: 5 },\n    { name: \"Battleboat\", quantity: 2, size: 4 },\n    { name: \"Destroyer\", quantity: 3, size: 3 },\n    { name: \"Submarine\", quantity: 4, size: 2 },\n  ];\n\n  create = () => {\n    let game = [];\n    for (let x = 0; x < 10; x++) {\n      game.push([]);\n      for (let y = 0; y < 10; y++) {\n        game[x][y] = null;\n      }\n    }\n    return game;\n  };\n\n  generateRandomBoats = () => {\n    this.random = true;\n    this.boats.forEach((boat) => {\n      for (let i = 0; i < boat.quantity; i++) {\n        let newBoat = new Boat(boat.name, boat.size);\n        this.findSpaces(boat.size, newBoat);\n      }\n    });\n  };\n\n  findSpaces = (size, boat) => {\n    let orientation = Math.floor(Math.random() * 2);\n    let space = this.generateRandomSpace(size, orientation);\n    let data = this.attemptPlacingBoat(size, space, orientation);\n    data ? this.updateBoard(data, boat) : this.findSpaces(size, boat);\n  };\n\n  generateRandomSpace = (size, orientation) => {\n    let coords = this.getCoords(size, orientation);\n    let space = this.board[coords[0]][coords[1]];\n    return space === null\n      ? coords\n      : this.generateRandomSpace(size, orientation);\n  };\n\n  getCoords = (size, orientation) => {\n    return orientation === 1\n      ? [this.getRandomInt(0, 9), this.getRandomInt(0, size)]\n      : [this.getRandomInt(0, size), this.getRandomInt(0, 9)];\n  };\n\n  getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  attemptPlacingBoat = (size, space, orientation) => {\n    let boatData = this.makeBoatData(size, space, orientation);\n    let check = this.random\n      ? this.makeRandomBoatData(size, space, orientation)\n      : boatData;\n    if (!this.anyCoordsOutside(boatData)) {\n      let spotFilled = this.checkCoordArray(check);\n      return spotFilled ? false : boatData;\n    } else {\n      return false;\n    }\n  };\n\n  makeBoatData = (size, space, orientation) => {\n    let data = [];\n    if (orientation === 1) {\n      for (let y = space[1]; y < space[1] + size; y++) {\n        data.push([space[0], y]);\n      }\n    } else {\n      for (let x = space[0]; x < space[0] + size; x++) {\n        data.push([x, space[1]]);\n      }\n    }\n    return data;\n  };\n\n  makeRandomBoatData = (size, space, orientation) => {\n    let data = [];\n    if (orientation === 1) {\n      for (let y = space[1] - 1; y < space[1] + (size + 1); y++) {\n        if (this.coordExists([space[0], y])) data.push([space[0], y]);\n      }\n    } else {\n      for (let x = space[0] - 1; x < space[0] + (size + 1); x++) {\n        if (this.coordExists([x, space[1]])) data.push([x, space[1]]);\n      }\n    }\n    return data;\n  };\n\n  anyCoordsOutside = (coords) => {\n    return coords.some((coord) => !this.coordExists(coord));\n  };\n\n  coordExists = (coord) => {\n    if (coord[0] < 10 && coord[0] >= 0) {\n      if (coord[1] < 10 && coord[1] >= 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  checkCoordArray = (testCoords) => {\n    let test = [];\n    testCoords.forEach((c) => {\n      test.push(this.board[c[0]][c[1]]);\n    });\n    return test.some((element) => element !== null);\n  };\n\n  updateBoard = (data, boat) => {\n    let newBoard = this.board.slice();\n    data.forEach((coord) => {\n      let boardData = {\n        isHit: false,\n        isSunk: false,\n        boat,\n      };\n      newBoard[coord[0]][coord[1]] = boardData;\n    });\n    this.board = newBoard;\n  };\n}\n\nexport default Gameboard;\n","class Player {\n  constructor(enemyGameBoard) {\n    this.enemyGameBoard = enemyGameBoard;\n    this.choicesLeft = this.makeChoiceArray();\n    this.smartChoices = this.makeSmartChoices();\n    this.lastMove = {};\n    this.hits = [];\n  }\n\n  userMakeMove = (coords) => {\n    let move = { coords };\n    if (this.verifyMoveIsLegal(move)) {\n      return this.makeMoveOnBoard(coords);\n    } else {\n      return;\n    }\n  };\n\n  makeChoiceArray = () => {\n    let array = [];\n    for (let x = 0; x < 10; x++) {\n      for (let y = 0; y < 10; y++) {\n        array.push({ x: x, y: y });\n      }\n    }\n    return array;\n  };\n\n  makeSmartChoiceArray = () => {\n    let array = [0];\n    let i = 0;\n    while (i < 100) {\n      for (let x = 0; x < 4; x++) {\n        i += 2;\n        array.push(i);\n      }\n      i % 2 === 0 ? (i += 3) : (i += 1);\n      array.push(i);\n    }\n    return array;\n  };\n\n  makeSmartChoices = () => {\n    let array = this.makeSmartChoiceArray();\n    let newArray = [];\n    array.forEach((i) => newArray.push(this.choicesLeft[i]));\n    newArray = newArray.slice(0, 50);\n    return newArray;\n  };\n\n  compMakeMove = () => {\n    if (this.lastMove) {\n      let data = this.assessLastMove();\n      let result = this.makeMoveOnBoard(data.coords);\n      this.logMove(data, result);\n      return result;\n    } else {\n      return this.makeRandomMove();\n    }\n  };\n\n  makeRandomMove = () => {\n    let data = this.makeRandomChoice();\n    let result = this.makeMoveOnBoard(data.coords);\n    this.logMove(data, result);\n    return result;\n  };\n\n  makeRandomChoice = () => {\n    let choice = Math.floor(Math.random() * this.smartChoices.length);\n    let coords = [this.smartChoices[choice].x, this.smartChoices[choice].y];\n    return { coords };\n  };\n\n  filterChoices = (coords, choiceArray) => {\n    let array = choiceArray.slice();\n    let choice = array.find((c) => c.x === coords[0] && c.y === coords[1]);\n    array = array.filter((c) => c !== choice);\n    return array;\n  };\n\n  makeMoveOnBoard = (move) => {\n    this.choicesLeft = this.filterChoices(move, this.choicesLeft);\n    this.smartChoices = this.filterChoices(move, this.smartChoices);\n    return this.enemyGameBoard.receiveAttack(move);\n  };\n\n  logMove = (data, results) => {\n    let { coords, direction, prevMoves, continueAttack } = data;\n    let { isHit, isSunk, boat } = results;\n    this.lastMove = {\n      coords,\n      isHit,\n      isSunk,\n      direction,\n      prevMoves,\n      boat,\n      continueAttack,\n    };\n    if (this.lastMove.isHit && !this.lastMove.isSunk) {\n      this.hits.push(this.lastMove);\n    }\n    if (this.lastMove.isSunk) {\n      this.filterHits();\n    }\n  };\n\n  assessLastMove = () => {\n    if (this.lastMove.isHit && !this.lastMove.isSunk) {\n      if (this.lastMove.direction) {\n        return this.continueAttack();\n      } else {\n        return this.plotNextMove();\n      }\n    } else if (this.lastMove.continueAttack && !this.lastMove.isSunk) {\n      return this.attemptReverse(this.lastMove);\n    } else if (this.lastMove.prevMoves && !this.lastMove.isSunk) {\n      return this.determineAndFilter(this.lastMove.prevMoves);\n    } else if (this.hits.length > 0) {\n      let data = this.useHitsArray();\n      return data;\n    } else {\n      return this.makeRandomChoice();\n    }\n  };\n\n  useHitsArray = () => {\n    this.lastMove = this.hits[0];\n    let nextMoves = this.makeNextMoves(this.lastMove.coords);\n    let filteredMoves = this.filterNextMoves(nextMoves);\n    if (filteredMoves.length > 0) {\n      this.filterHits();\n      return this.determineAndFilter(filteredMoves);\n    } else {\n      this.filterHits();\n      if (this.hits.length > 0) {\n        return this.useHitsArray();\n      } else {\n        return this.makeRandomChoice();\n      }\n    }\n  };\n\n  determineAndFilter = (moves) => {\n    if (moves.length > 1) {\n      let nextMove = moves[Math.floor(Math.random() * moves.length)];\n      let filteredMoves = moves.filter((m) => m !== nextMove);\n      return {\n        coords: nextMove.coords,\n        direction: nextMove.direction,\n        prevMoves: filteredMoves,\n      };\n    } else {\n      return {\n        coords: moves[0].coords,\n        direction: moves[0].direction,\n        prevMoves: \"\",\n      };\n    }\n  };\n\n  continueAttack = () => {\n    let move = this.determineNextAttack(this.lastMove.coords);\n    if (this.verifyMoveIsLegal(move)) {\n      return move;\n    } else {\n      return this.attemptReverse(this.lastMove);\n    }\n  };\n\n  attemptReverse = (move) => {\n    let newDirection = this.reverseDirection(move.direction);\n    let newMove = move.prevMoves\n      ? move.prevMoves.find((m) => m.direction === newDirection)\n      : \"\";\n    if (this.verifyMoveIsLegal(newMove)) {\n      return newMove;\n    } else if (this.hits.length > 0) {\n      return this.useHitsArray();\n    } else {\n      return this.makeRandomChoice();\n    }\n  };\n\n  reverseDirection = (direction) => {\n    if (direction === \"north\") {\n      return \"south\";\n    } else if (direction === \"south\") {\n      return \"north\";\n    } else if (direction === \"east\") {\n      return \"west\";\n    } else {\n      return \"east\";\n    }\n  };\n\n  determineNextAttack = (c) => {\n    let coords = \"\";\n    if (this.lastMove.direction === \"north\") {\n      coords = [c[0], c[1] - 1];\n    } else if (this.lastMove.direction === \"east\") {\n      coords = [c[0] + 1, c[1]];\n    } else if (this.lastMove.direction === \"south\") {\n      coords = [c[0], c[1] + 1];\n    } else {\n      coords = [c[0] - 1, c[1]];\n    }\n    return {\n      coords,\n      direction: this.lastMove.direction,\n      prevMoves: this.lastMove.prevMoves,\n      continueAttack: true,\n    };\n  };\n\n  verifyMoveIsLegal = (move) => {\n    if (move) {\n      return this.choicesLeft.some(\n        (coord) => coord.x === move.coords[0] && coord.y === move.coords[1]\n      );\n    } else {\n      return false;\n    }\n  };\n\n  plotNextMove = () => {\n    let nextMoves = this.makeNextMoves(this.lastMove.coords);\n    let filteredMoves = this.filterNextMoves(nextMoves);\n    return filteredMoves.length > 0\n      ? this.determineAndFilter(filteredMoves)\n      : this.makeRandomChoice();\n  };\n\n  makeNextMoves = (move) => {\n    return [\n      { coords: [move[0], move[1] - 1], direction: \"north\" },\n      { coords: [move[0] - 1, move[1]], direction: \"west\" },\n      { coords: [move[0], move[1] + 1], direction: \"south\" },\n      { coords: [move[0] + 1, move[1]], direction: \"east\" },\n    ];\n  };\n\n  filterNextMoves = (nextMoves) => {\n    let filteredMoves = [];\n    nextMoves.forEach((move) => {\n      if (this.verifyMoveIsLegal(move)) {\n        filteredMoves.push(move);\n      }\n    });\n    return filteredMoves;\n  };\n\n  filterHits = () => {\n    this.hits = this.hits.filter((hit) => !hit.boat.isSunk);\n  };\n}\n\nexport default Player;\n","import Gameboard from \"../gameboard/gameboard_class\";\nimport Player from \"../player/player_class\";\n\nclass Game {\n  constructor(board) {\n    this.playerOne = this.createPlayer(false);\n    this.playerTwo = this.createPlayer(true, board);\n  }\n\n  userTurn = (coords) => {\n    let user = this.playerOne.userMakeMove(coords);\n    if (user) {\n      user.win = this.checkWin(this.playerOne);\n      return user;\n    } else {\n      return;\n    }\n  };\n\n  compTurn = () => {\n    let comp = this.playerTwo.compMakeMove();\n    comp.win = this.checkWin(this.playerTwo);\n    return comp;\n  };\n\n  checkWin = (player) => {\n    return player.enemyGameBoard.shipsLeft === 0 ? true : false;\n  };\n\n  createPlayer = (computer, board = \"\") => {\n    let game = new Gameboard(board);\n    if (board === \"\") game.generateRandomBoats();\n    return new Player(game, computer);\n  };\n}\n\nexport default Game;\n","import React from \"react\";\n\nconst BoardInfo = (props) => {\n  return (\n    <div className={props.title === \"Your Boats\" ? \"your-info\" : \"pc-info\"}>\n      <h2 className=\"info-title\">{props.title}</h2>\n      <h2 className=\"info-ship-count\">Ships Left: {props.shipsLeft}</h2>\n    </div>\n  );\n};\n\nexport default BoardInfo;\n","import React from \"react\";\nimport \"./Gameboard.css\";\n\nimport BoardInfo from \"../BoardInfo\";\n\nconst Board = (props) => {\n  const info = {\n    colInfo: [\"\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    rowInfo: [\"\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"],\n  };\n\n  const handleEdit = (e) => {\n    let newCoords = dataToCoords(e);\n    props.handleEdit(props.board[newCoords[0]][newCoords[1]]);\n  };\n\n  const handleMove = (e) => {\n    let newCoords = dataToCoords(e);\n    props.handleInput(newCoords);\n  };\n\n  const determineClass = (cell) => {\n    if (cell !== null) {\n      if (cell.isSunk) {\n        return \"is-sunk\";\n      } else if (cell === \"~\") {\n        return \"board-miss\";\n      } else if (cell.isHit) {\n        return \"board-hit\";\n      } else if (props.handleInput) {\n        return \"your-square\";\n      } else {\n        return determineBoat(cell);\n      }\n    } else if (props.handleInput) {\n      return \"your-square\";\n    } else {\n      return \"board-square\";\n    }\n  };\n\n  const determineBoat = (cell) => {\n    if (cell.boat.name === \"Carrier\") {\n      return \"carrier\";\n    } else if (cell.boat.name === \"Battleboat\") {\n      return \"battleboat\";\n    } else if (cell.boat.name === \"Destroyer\") {\n      return \"destroyer\";\n    } else {\n      return \"submarine\";\n    }\n  };\n\n  const determineInner = (cell) => {\n    if (cell !== null) {\n      if (cell.isSunk || cell.isHit) {\n        return \"X\";\n      } else if (cell === \"~\") {\n        return \"~\";\n      }\n    }\n  };\n\n  const handleDragOver = (e) => {\n    e.preventDefault();\n  };\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    let square = dataToCoords(e);\n    props.sendCoord(square);\n  };\n\n  const dataToCoords = (e) => {\n    let square = e.target.attributes[0].value.split(\",\");\n    square = square.map((coord) => {\n      return parseInt(coord);\n    });\n    return square;\n  };\n\n  return (\n    <div className={props.active ? \"active\" : \"inactive\"}>\n      <div className=\"gameboard-container\">\n        <div className=\"gameboard-col-info\">\n          {info.rowInfo.map((row, i) => (\n            <div className=\"info-square\" key={i}>\n              {row}\n            </div>\n          ))}\n        </div>\n        <div className=\"gameboard-row-info\">\n          {info.colInfo.map((col, i) => (\n            <div className=\"info-square\" key={i}>\n              {col}\n            </div>\n          ))}\n        </div>\n        <div className=\"gameboard\">\n          {props.board.map((row, x) => (\n            <div className=\"gameboard-column\" key={x}>\n              {row.map((cell, y) => (\n                <div\n                  key={`${x},${y}`}\n                  data={[x, y]}\n                  className={determineClass(cell)}\n                  onClick={\n                    props.handleInput\n                      ? handleMove\n                      : props.handleEdit\n                      ? handleEdit\n                      : null\n                  }\n                  onDragOver={handleDragOver}\n                  onDrop={handleDrop}\n                >\n                  {determineInner(cell)}\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n      {props.showInfo ? (\n        <BoardInfo shipsLeft={props.shipsLeft} title={props.title} />\n      ) : null}\n    </div>\n  );\n};\n\nexport default Board;\n","import React, { useState } from \"react\";\nimport \"./Navbar.css\";\nimport { Github } from \"@styled-icons/simple-icons\";\n\nconst Navbar = (props) => {\n  const [showMenu, setShowMenu] = useState(false);\n\n  const handleClick = (e) => {\n    if (showMenu) setShowMenu(false);\n    e.target.innerText === \"New Game\" ? props.newGame() : props.toggleRules();\n  };\n\n  const toggleMenu = () => {\n    showMenu ? setShowMenu(false) : setShowMenu(true);\n  };\n\n  return (\n    <div className=\"nav-container\">\n      <nav className=\"main-nav\">\n        <h1 className=\"nav-title\">BattleBoats!</h1>\n        {props.windowWidth > 750 ? (\n          <ul className=\"nav-links\">\n            {\" \"}\n            <button className=\"nav-button\" onClick={handleClick}>\n              Rules\n            </button>{\" \"}\n            <button className=\"nav-button\" onClick={handleClick}>\n              New Game\n            </button>\n            <a\n              href=\"https://github.com/kgilla/battleboats\"\n              target=\"_blank\"\n              className=\"icon-link\"\n            >\n              <Github className=\"icon\" />\n            </a>\n          </ul>\n        ) : (\n          <button className=\"nav-button\" onClick={toggleMenu}>\n            Menu\n          </button>\n        )}\n        {showMenu ? (\n          <div className=\"overlay\">\n            <div className=\"nav-menu\">\n              <h2 className=\"nav-menu-heading\">BattleBoats!</h2>{\" \"}\n              <ul className=\"menu-links\">\n                {\" \"}\n                <button className=\"setup-button\" onClick={handleClick}>\n                  New Game\n                </button>\n                <button className=\"setup-button\" onClick={handleClick}>\n                  Rules\n                </button>{\" \"}\n                <button\n                  className=\"setup-button\"\n                  id=\"back-button\"\n                  onClick={toggleMenu}\n                >\n                  Back To Game\n                </button>{\" \"}\n                <a\n                  href=\"https://github.com/kgilla/battleboats\"\n                  target=\"_blank\"\n                  className=\"icon-link\"\n                >\n                  <Github className=\"icon\" />\n                </a>\n              </ul>\n            </div>\n          </div>\n        ) : null}\n      </nav>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./Boatyard.css\";\n\nconst Boatyard = (props) => {\n  const handleClick = (e) => {\n    props.orientation === 0\n      ? props.sendBoatOrientation(1)\n      : props.sendBoatOrientation(0);\n  };\n\n  const handleDragStart = (e) => {\n    props.orientation === 0 ? handleOffsetX(e) : handleOffsetY(e);\n  };\n\n  const handleOffsetX = (e) => {\n    let size = determineSquareSize();\n    let offset = e.nativeEvent.offsetX - size;\n    offset = Math.ceil(offset / size);\n    props.sendOffset(offset);\n  };\n\n  const handleOffsetY = (e) => {\n    let size = determineSquareSize();\n    let offset = e.nativeEvent.offsetY - size;\n    offset = Math.ceil(offset / size);\n    props.sendOffset(offset);\n  };\n\n  const determineSquareSize = () => {\n    return props.windowWidth < 360\n      ? 25\n      : props.windowWidth < 768\n      ? 30\n      : props.windowWidth < 1400\n      ? 40\n      : 50;\n  };\n\n  const createBoat = () => {\n    let boat = [];\n    for (let i = 0; i < props.boats[0].length; i++) {\n      boat.push(\n        <div key={i} className={props.boats[0].name.toLowerCase()}></div>\n      );\n    }\n    return boat;\n  };\n\n  return (\n    <div className=\"boatyard\">\n      <h1 className=\"boatyard-title\">Place Your Boats</h1>\n      <div className=\"dock\" onClick={handleClick}>\n        {props.boats.length > 0 ? (\n          <div\n            className={\n              props.orientation === 0 ? \"boat-horizontal\" : \"boat-vertical\"\n            }\n            draggable\n            onDragStart={handleDragStart}\n            onClick={handleClick}\n          >\n            {props.boats.length > 0 ? createBoat() : null}\n          </div>\n        ) : (\n          <h2 className=\"dock-text\">All Set!</h2>\n        )}\n      </div>\n      {props.boats.length > 0 ? (\n        <h2 className=\"boat-name\">{props.boats[0].name}</h2>\n      ) : null}\n    </div>\n  );\n};\n\nexport default Boatyard;\n","import React from \"react\";\nimport \"./SetupIntro.css\";\n\nconst SetupIntro = (props) => {\n  const handleClick = () => {\n    props.introChange();\n  };\n\n  return (\n    <div className=\"overlay\">\n      {\" \"}\n      <div className=\"setup-intro-container\">\n        <h2 className=\"setup-intro-heading\">The Setup.</h2>\n        <ul className=\"setup-intro-list\">\n          <li className=\"setup-intro-tip\">\n            Drag and drop your boats onto your board.\n          </li>\n          <li className=\"setup-intro-tip\">\n            You can rotate ships before you grab them by clicking on them.\n          </li>\n          <li className=\"setup-intro-tip\">\n            You can remove a placed ship simply by clicking on it.\n          </li>\n          <li className=\"setup-intro-tip\">\n            Lazy? Click random boats and you're ready to pew pew.\n          </li>\n        </ul>\n        <button className=\"setup-button\" onClick={handleClick}>\n          Thanks Tips!\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default SetupIntro;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Setup.css\";\n\nimport Board from \"../Gameboard\";\nimport Boatyard from \"../Boatyard\";\nimport SetupIntro from \"../SetupIntro\";\n\nimport Gameboard from \"../../game_classes/gameboard/gameboard_class\";\nimport Boat from \"../../game_classes/boat/boat_class\";\n\nconst Setup = (props) => {\n  const [gameboard, setGameboard] = useState(\"\");\n  const [board, setBoard] = useState(\"\");\n  const [boats, setBoats] = useState(\"\");\n  const [orientation, setOrientation] = useState(0);\n  const [offset, setOffset] = useState(0);\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  const determineOrientation = (orientation) => {\n    setOrientation(orientation);\n  };\n\n  const calcOffset = (coord) => {\n    return orientation === 0\n      ? [coord[0] - offset, coord[1]]\n      : [coord[0], coord[1] - offset];\n  };\n\n  const handleCoord = (coord) => {\n    let newCoord = calcOffset(coord);\n    let newData = gameboard.attemptPlacingBoat(\n      boats[0].length,\n      newCoord,\n      orientation\n    );\n    if (newData) {\n      gameboard.updateBoard(newData, boats[0]);\n      let newBoats = boats.slice(1);\n      setBoats(newBoats);\n      updateBoard();\n    }\n  };\n\n  const handleOffset = (num) => {\n    setOffset(num);\n  };\n\n  const updateBoard = () => {\n    setBoard(gameboard.board);\n  };\n\n  const handleGameStart = () => {\n    props.sendUserBoard(board);\n  };\n\n  const handleRandom = () => {\n    gameboard.board = gameboard.create();\n    gameboard.generateRandomBoats();\n    setBoats(\"\");\n    updateBoard();\n  };\n\n  const handleReset = () => {\n    init();\n  };\n\n  const init = () => {\n    let newBoard = new Gameboard();\n    setGameboard(newBoard);\n    setBoard(newBoard.board);\n    let newBoats = [];\n    newBoard.boats.forEach((boat) => {\n      for (let i = 0; i < boat.quantity; i++) {\n        newBoats.push(new Boat(boat.name, boat.size));\n      }\n    });\n    setBoats(newBoats);\n  };\n\n  const handleCoordChange = (square) => {\n    if (square) {\n      setBoats([square.boat, ...boats]);\n      gameboard.board = gameboard.board.map((col) => {\n        return col.map((ele) => {\n          if (ele) {\n            if (ele.boat === square.boat) {\n              return null;\n            } else {\n              return ele;\n            }\n          }\n          return null;\n        });\n      });\n      updateBoard();\n    }\n  };\n\n  const handleIntroChange = () => {\n    props.toggleShowIntro();\n  };\n\n  return (\n    <div className=\"setup-container\">\n      {props.showIntro ? <SetupIntro introChange={handleIntroChange} /> : null}\n      {gameboard ? (\n        <div className=\"setup-main-container\">\n          <Boatyard\n            boats={boats}\n            orientation={orientation}\n            sendBoatOrientation={determineOrientation}\n            sendOffset={handleOffset}\n            windowWidth={props.windowWidth}\n          />\n          <div className=\"setup-gameboard\">\n            <Board\n              board={board}\n              sendCoord={handleCoord}\n              handleEdit={handleCoordChange}\n            />\n          </div>\n        </div>\n      ) : null}\n      <div className=\"setup-button-box\">\n        <button className=\"setup-button\" onClick={handleRandom}>\n          Random Boats\n        </button>\n        <button className=\"setup-button\" onClick={handleReset}>\n          Reset Board\n        </button>\n        <button className=\"setup-button\" onClick={handleIntroChange}>\n          How To\n        </button>\n        {boats.length > 0 ? (\n          <button disabled className=\"start-button\">\n            Start Game\n          </button>\n        ) : (\n          <button onClick={handleGameStart} className=\"start-button\">\n            Start Game\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Setup;\n","import React from \"react\";\nimport \"./GameOver.css\";\n\nconst GameOver = (props) => {\n  const handleClick = () => {\n    props.handleNewGame();\n  };\n\n  return (\n    <div className=\"overlay\">\n      <div className={props.data.win ? \"win-box\" : \"lose-box\"}>\n        <h1 className=\"gameover-heading\">{props.data.title}</h1>\n        <p className=\"gameover-message\">{props.data.message}</p>\n        <button className=\"gameover-button\" onClick={handleClick}>\n          Play Again?\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default GameOver;\n","import React from \"react\";\nimport \"./Rules.css\";\n\nconst Rules = (props) => {\n  const handleClick = () => {\n    props.toggleRules();\n  };\n  return (\n    <div className=\"overlay\">\n      <div className=\"rules-container\">\n        <div className=\"main-rules\">\n          {\" \"}\n          <h2 className=\"rules-heading\">The Rules.</h2>\n          <ul>\n            {\" \"}\n            <li className=\"rule\">\n              Each turn you must guess a square on your enemy's board you think\n              might have a boat.\n            </li>\n            <li className=\"rule\">\n              If you guess correctly, you are able to continue your attack until\n              you miss.\n            </li>\n            <li className=\"rule\">\n              The game is over once a player successfully sinks all of their\n              opponent's boats\n            </li>\n          </ul>\n        </div>\n        <div className=\"rules-legend-container\">\n          <h2 className=\"rules-heading\">Board Legend</h2>\n          <ul className=\"rules-legend\">\n            {\" \"}\n            <div className=\"legend-item\">\n              {\" \"}\n              <p>Carrier</p>\n              <div className=\"carrier\"></div>\n            </div>\n            <div className=\"legend-item\">\n              {\" \"}\n              <p>Battleboat</p>\n              <div className=\"battleboat\"></div>\n            </div>\n            <div className=\"legend-item\">\n              {\" \"}\n              <p>Destroyer</p>\n              <div className=\"destroyer\"></div>\n            </div>\n            <div className=\"legend-item\">\n              {\" \"}\n              <p>Submarine</p>\n              <div className=\"submarine\"></div>\n            </div>\n            <div className=\"legend-item\">\n              {\" \"}\n              <p>A Hit</p>\n              <div className=\"board-hit\">X</div>\n            </div>\n            <div className=\"legend-item\">\n              {\" \"}\n              <p>A Miss</p>\n              <div className=\"board-miss\">~</div>\n            </div>\n            <div className=\"legend-item\">\n              {\" \"}\n              <p>A Sunk Boat</p>\n              <div className=\"is-sunk\">X</div>\n            </div>\n          </ul>\n        </div>\n\n        <button className=\"setup-button\" onClick={handleClick}>\n          Got It!\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Rules;\n","import React from \"react\";\nimport \"./TurnChange.css\";\n\nconst TurnChange = (props) => {\n  return (\n    <div className={props.userTurn ? \"your-turn\" : \"cpu-turn\"}>\n      {props.userTurn ? \"Your Turn!\" : \"Computer's Turn\"}\n    </div>\n  );\n};\n\nexport default TurnChange;\n","import React, { useState, useEffect } from \"react\";\nimport \"./reset.css\";\nimport \"./App.css\";\n\nimport Game from \"../../game_classes/game/game_class\";\nimport Board from \"../Gameboard\";\nimport Navbar from \"../Navbar\";\nimport Setup from \"../Setup\";\nimport GameOver from \"../GameOver\";\nimport Rules from \"../Rules\";\nimport TurnChange from \"../TurnChange\";\n\nfunction App() {\n  const [game, setGame] = useState(\"\");\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [winData, setWinData] = useState(\"\");\n  const [gameStarted, setGameStarted] = useState(false);\n  const [boardOne, setBoardOne] = useState(\"\");\n  const [boardOneData, setBoardOneData] = useState(\"\");\n  const [boardTwo, setBoardTwo] = useState(\"\");\n  const [boardTwoData, setBoardTwoData] = useState(\"\");\n  const [userTurn, setUserTurn] = useState(true);\n  const [showRules, setShowRules] = useState(false);\n  const [showIntro, setShowIntro] = useState(true);\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  const [showTurn, setShowTurn] = useState(false);\n\n  useEffect(() => {\n    const handleWindowResize = () => {\n      setWindowWidth(window.innerWidth);\n    };\n    window.addEventListener(\"resize\", handleWindowResize);\n  }, []);\n\n  const playerWin = {\n    win: true,\n    title: \"Winner!\",\n    message: \"You defeated the evil Battleboat threat!\",\n  };\n\n  const compWin = {\n    win: false,\n    title: \"Defeat!\",\n    message: \"You failed to overcome the impending Battleboat threat!\",\n  };\n\n  const handleInput = (input) => {\n    if (userTurn) {\n      let user = game.userTurn(input);\n      if (user) {\n        updateBoard(1);\n        if (user.win) {\n          handleGameOver(playerWin);\n        } else if (!user.isHit) {\n          setUserTurn(false);\n          changeTurn();\n          setTimeout(() => {\n            takeCompTurn();\n          }, 1000);\n        }\n      }\n    }\n  };\n\n  const takeCompTurn = () => {\n    let comp = game.compTurn();\n    updateBoard(2);\n    if (comp.win) {\n      handleGameOver(compWin);\n    } else if (comp.isHit) {\n      setTimeout(() => {\n        takeCompTurn();\n      }, 1000);\n    } else {\n      setTimeout(() => {\n        changeTurn();\n        setUserTurn(true);\n      }, 1000);\n    }\n  };\n\n  const changeTurn = () => {\n    setShowTurn(true);\n    setTimeout(() => {\n      setShowTurn(false);\n    }, 1000);\n  };\n\n  const updateBoard = (player) => {\n    if (player === 1) {\n      setBoardOne(game.playerOne.enemyGameBoard.board);\n      setBoardOneData(game.playerOne.enemyGameBoard);\n    } else {\n      setBoardTwo(game.playerTwo.enemyGameBoard.board);\n      setBoardTwoData(game.playerTwo.enemyGameBoard);\n    }\n  };\n\n  const handleGameOver = (data) => {\n    setWinData(data);\n    setIsGameOver(true);\n  };\n\n  const startGame = (board) => {\n    let newGame = new Game(board);\n    setGame(newGame);\n    setBoardOne(newGame.playerOne.enemyGameBoard.board);\n    setBoardTwo(newGame.playerTwo.enemyGameBoard.board);\n    setBoardOneData(newGame.playerOne.enemyGameBoard);\n    setBoardTwoData(newGame.playerTwo.enemyGameBoard);\n    setUserTurn(true);\n    setGameStarted(true);\n    setIsGameOver(false);\n    changeTurn();\n  };\n\n  const handleUserBoard = (board) => {\n    startGame(board);\n  };\n\n  const handleNewGame = () => {\n    setGameStarted(false);\n    setIsGameOver(false);\n  };\n\n  const toggleRules = () => {\n    showRules ? setShowRules(false) : setShowRules(true);\n  };\n\n  const toggleShowIntro = () => {\n    showIntro ? setShowIntro(false) : setShowIntro(true);\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar\n        newGame={handleNewGame}\n        toggleRules={toggleRules}\n        windowWidth={windowWidth}\n      />\n      {showTurn ? <TurnChange userTurn={userTurn} /> : null}\n      {showRules ? <Rules toggleRules={toggleRules} /> : null}\n      {isGameOver ? (\n        <GameOver data={winData} handleNewGame={handleNewGame} />\n      ) : null}\n      {gameStarted ? (\n        <div className=\"board-container\">\n          <Board\n            board={boardTwo}\n            title=\"Your Boats\"\n            shipsLeft={boardTwoData.shipsLeft}\n            active={!userTurn ? true : false}\n            showInfo={true}\n          />\n          <Board\n            board={boardOne}\n            title=\"Enemy Boats\"\n            handleInput={handleInput}\n            shipsLeft={boardOneData.shipsLeft}\n            active={userTurn ? true : false}\n            showInfo={true}\n          />\n        </div>\n      ) : (\n        <Setup\n          windowWidth={windowWidth}\n          showIntro={showIntro}\n          sendUserBoard={handleUserBoard}\n          toggleShowIntro={toggleShowIntro}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}